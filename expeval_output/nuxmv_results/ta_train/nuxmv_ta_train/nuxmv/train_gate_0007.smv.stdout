*** This is nuXmv 2.0.0 (compiled on Sun Mar 14 22:37:19 2021)
*** Copyright (c) 2014-2021, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2021, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- no proof or counterexample found with bound 0
-- no proof or counterexample found with bound 1
-- no proof or counterexample found with bound 2
-- no proof or counterexample found with bound 3
-- no proof or counterexample found with bound 4
-- no proof or counterexample found with bound 5
-- no proof or counterexample found with bound 6
-- no proof or counterexample found with bound 7
-- no proof or counterexample found with bound 8
-- no proof or counterexample found with bound 9
-- LTL specification  G ((gate.l = g0 & next(gate.l) = g1) ->  F (gate.l = g2 & next(gate.l) = g3))  is false
-- as demonstrated by the following execution sequence
Trace Description: IC3 smt counterexample 
Trace Type: Counterexample 
Infinite Trace diverging symbols: gate.y, train0.x, train1.x, train2.x, train3.x, train5.x, train6.x
  -> State: 1.1 <-
    gate.y = 0.0
    controller.z = 0.0
    train0.x = 0.0
    train1.x = 0.0
    train2.x = 0.0
    train3.x = 0.0
    train4.x = 0.0
    train5.x = 0.0
    train6.x = 0.0
    gate.l = g0
    controller.cnt = 1
    controller.l = c0
    train0.l = t0
    train1.l = t0
    train2.l = t0
    train3.l = t0
    train4.l = t0
    train5.l = t0
    train6.l = t0
    e = 1
    d = 2
    c = 1
    b = 5
    a = 2
  -- [ time elapse: time = 0.0; delta = f'1/8 ] --
  -> State: 1.2 <-
    gate.y = f'1/8
    controller.z = f'1/8
    train0.x = f'1/8
    train1.x = f'1/8
    train2.x = f'1/8
    train3.x = f'1/8
    train4.x = f'1/8
    train5.x = f'1/8
    train6.x = f'1/8
  -- [ time elapse: time = f'1/8; delta = f'9/8 ] --
  -> State: 1.3 <-
    gate.y = f'5/4
    controller.z = f'5/4
    train0.x = f'5/4
    train1.x = f'5/4
    train2.x = f'5/4
    train3.x = f'5/4
    train4.x = f'5/4
    train5.x = f'5/4
    train6.x = f'5/4
  -> Input: 1.4 <-
    gate.event = stutter
    controller.event = approach
    train0.event = stutter
    train1.event = stutter
    train2.event = stutter
    train3.event = stutter
    train4.event = approach
    train5.event = stutter
    train6.event = stutter
    gate.evt_move = FALSE
    gate.evt_rise = FALSE
    gate.evt_lower = FALSE
    gate.evt_stutter = TRUE
    controller.evt_rise = FALSE
    controller.evt_lower = FALSE
    controller.evt_exit = FALSE
    controller.evt_approach = TRUE
    controller.evt_stutter = FALSE
    train0.evt_move = FALSE
    train0.evt_exit = FALSE
    train0.evt_approach = FALSE
    train0.evt_stutter = TRUE
    train1.evt_move = FALSE
    train1.evt_exit = FALSE
    train1.evt_approach = FALSE
    train1.evt_stutter = TRUE
    train2.evt_move = FALSE
    train2.evt_exit = FALSE
    train2.evt_approach = FALSE
    train2.evt_stutter = TRUE
    train3.evt_move = FALSE
    train3.evt_exit = FALSE
    train3.evt_approach = FALSE
    train3.evt_stutter = TRUE
    train4.evt_move = FALSE
    train4.evt_exit = FALSE
    train4.evt_approach = TRUE
    train4.evt_stutter = FALSE
    train5.evt_move = FALSE
    train5.evt_exit = FALSE
    train5.evt_approach = FALSE
    train5.evt_stutter = TRUE
    train6.evt_move = FALSE
    train6.evt_exit = FALSE
    train6.evt_approach = FALSE
    train6.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.4 <-
    controller.z = 0.0
    train4.x = 0.0
    controller.l = c1
    train4.l = t1
  -- [ time elapse: time = f'5/4; delta = f'1/8 ] --
  -> State: 1.5 <-
    gate.y = f'11/8
    controller.z = f'1/8
    train0.x = f'11/8
    train1.x = f'11/8
    train2.x = f'11/8
    train3.x = f'11/8
    train4.x = f'1/8
    train5.x = f'11/8
    train6.x = f'11/8
  -- [ time elapse: time = f'11/8; delta = f'7/8 ] --
  -> State: 1.6 <-
    gate.y = f'9/4
    controller.z = 1.0
    train0.x = f'9/4
    train1.x = f'9/4
    train2.x = f'9/4
    train3.x = f'9/4
    train4.x = 1.0
    train5.x = f'9/4
    train6.x = f'9/4
  -> Input: 1.7 <-
    gate.event = lower
    controller.event = lower
    train4.event = stutter
    gate.evt_lower = TRUE
    gate.evt_stutter = FALSE
    controller.evt_lower = TRUE
    controller.evt_approach = FALSE
    train4.evt_approach = FALSE
    train4.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.7 <-
    gate.y = 0.0
    gate.l = g1
    controller.l = c2
  -> Input: 1.8 <-
    gate.event = move
    controller.event = stutter
    gate.evt_move = TRUE
    gate.evt_lower = FALSE
    controller.evt_lower = FALSE
    controller.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.8 <-
    gate.l = g2
  -- Loop starts here
  -- [ time elapse: time = diverging; delta = f'23/8 ] --
  -> State: 1.9 <-
    gate.y = gate.y + f'23/8
    controller.z = f'31/8
    train0.x = train0.x + f'23/8
    train1.x = train1.x + f'23/8
    train2.x = train2.x + f'23/8
    train3.x = train3.x + f'23/8
    train4.x = f'31/8
    train5.x = train5.x + f'23/8
    train6.x = train6.x + f'23/8
  -- [ time elapse: time = diverging; delta = f'9/8 ] --
  -> State: 1.10 <-
    gate.y = gate.y + f'9/8
    controller.z = 5.0
    train0.x = train0.x + f'9/8
    train1.x = train1.x + f'9/8
    train2.x = train2.x + f'9/8
    train3.x = train3.x + f'9/8
    train4.x = 5.0
    train5.x = train5.x + f'9/8
    train6.x = train6.x + f'9/8
  -> Input: 1.11 <-
    gate.event = stutter
    train4.event = move
    gate.evt_move = FALSE
    gate.evt_stutter = TRUE
    train4.evt_move = TRUE
    train4.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.11 <-
    gate.y = gate.y + 0.0
    train0.x = train0.x + 0.0
    train1.x = train1.x + 0.0
    train2.x = train2.x + 0.0
    train3.x = train3.x + 0.0
    train5.x = train5.x + 0.0
    train6.x = train6.x + 0.0
    train4.l = t2
  -> Input: 1.12 <-
  -- [ discrete transition ] --
  -> State: 1.12 <-
    train4.l = t3
  -> Input: 1.13 <-
    controller.event = exit
    train4.event = exit
    controller.evt_exit = TRUE
    controller.evt_stutter = FALSE
    train4.evt_move = FALSE
    train4.evt_exit = TRUE
  -- [ discrete transition ] --
  -> State: 1.13 <-
    controller.z = 0.0
    controller.cnt = 0
    controller.l = c3
    train4.l = t0
  -> Input: 1.14 <-
    controller.event = approach
    train4.event = approach
    controller.evt_exit = FALSE
    controller.evt_approach = TRUE
    train4.evt_exit = FALSE
    train4.evt_approach = TRUE
  -- [ discrete transition ] --
  -> State: 1.14 <-
    train4.x = 0.0
    controller.cnt = 1
    controller.l = c2
    train4.l = t1
  -- [ time elapse: time = diverging; delta = f'31/8 ] --
  -> State: 1.15 <-
    gate.y = gate.y + f'31/8
    controller.z = f'31/8
    train0.x = train0.x + f'31/8
    train1.x = train1.x + f'31/8
    train2.x = train2.x + f'31/8
    train3.x = train3.x + f'31/8
    train4.x = f'31/8
    train5.x = train5.x + f'31/8
    train6.x = train6.x + f'31/8
SUCCESS 
