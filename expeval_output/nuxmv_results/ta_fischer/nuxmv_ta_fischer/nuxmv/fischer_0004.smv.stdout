*** This is nuXmv 2.0.0 (compiled on Sun Mar 14 22:37:19 2021)
*** Copyright (c) 2014-2021, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2021, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- no proof or counterexample found with bound 0
-- no proof or counterexample found with bound 1
-- no proof or counterexample found with bound 2
-- no proof or counterexample found with bound 3
-- no proof or counterexample found with bound 4
-- no proof or counterexample found with bound 5
-- no proof or counterexample found with bound 6
-- LTL specification ( G ( F P0.location = wait) ->  G ( F P0.location = cs))  is false
-- as demonstrated by the following execution sequence
Trace Description: IC3 smt counterexample 
Trace Type: Counterexample 
Infinite Trace diverging symbols: P0.x, P1.x, P2.x, P3.x
  -> State: 1.1 <-
    P0.x = 0.0
    P1.x = 0.0
    P2.x = 0.0
    P3.x = 0.0
    id = 0
    turn = 1
    P0.location = idle
    P1.location = idle
    P2.location = idle
    P3.location = idle
    P0.k = 2
    P1.k = 2
    P2.k = 2
    P3.k = 2
  -- [ discrete transition ] --
  -> State: 1.2 <-
    P0.location = req
  -- [ discrete transition ] --
  -> State: 1.3 <-
    id = 1
    turn = 4
    P0.location = wait
  -- [ time elapse: time = 0.0; delta = f'9/4 ] --
  -> State: 1.4 <-
    P0.x = f'9/4
    P1.x = f'9/4
    P2.x = f'9/4
    P3.x = f'9/4
  -- Loop starts here
  -- [ time elapse: time = diverging; delta = f'1/4 ] --
  -> State: 1.5 <-
    P0.x = P0.x + f'1/4
    P1.x = P1.x + f'1/4
    P2.x = P2.x + f'1/4
    P3.x = P3.x + f'1/4
  -- [ time elapse: time = diverging; delta = f'17/4 ] --
  -> State: 1.6 <-
    P0.x = P0.x + f'17/4
    P1.x = P1.x + f'17/4
    P2.x = P2.x + f'17/4
    P3.x = P3.x + f'17/4
  -- [ time elapse: time = diverging; delta = f'1/4 ] --
  -> State: 1.7 <-
    P0.x = P0.x + f'1/4
    P1.x = P1.x + f'1/4
    P2.x = P2.x + f'1/4
    P3.x = P3.x + f'1/4
SUCCESS 
