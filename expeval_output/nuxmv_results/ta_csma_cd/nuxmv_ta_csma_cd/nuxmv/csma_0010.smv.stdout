*** This is nuXmv 2.0.0 (compiled on Sun Mar 14 22:37:19 2021)
*** Copyright (c) 2014-2021, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2021, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- no proof or counterexample found with bound 0
-- no proof or counterexample found with bound 1
-- no proof or counterexample found with bound 2
-- no proof or counterexample found with bound 3
-- no proof or counterexample found with bound 4
-- no proof or counterexample found with bound 5
-- no proof or counterexample found with bound 6
-- no proof or counterexample found with bound 7
-- no proof or counterexample found with bound 8
-- no proof or counterexample found with bound 9
-- no proof or counterexample found with bound 10
-- no proof or counterexample found with bound 11
-- no proof or counterexample found with bound 12
-- no proof or counterexample found with bound 13
-- no proof or counterexample found with bound 14
-- no proof or counterexample found with bound 15
-- LTL specification  G (s0.l = transm ->  F s0.l = wait)  is false
-- as demonstrated by the following execution sequence
Trace Description: IC3 smt counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    bus.x = 0.0
    s0.x = 0.0
    s1.x = 0.0
    s2.x = 0.0
    s3.x = 0.0
    s4.x = 0.0
    s5.x = 0.0
    s6.x = 0.0
    s7.x = 0.0
    s8.x = 0.0
    s9.x = 0.0
    bus.j = 0
    bus.l = idle
    s0.l = wait
    s1.l = wait
    s2.l = wait
    s3.l = wait
    s4.l = wait
    s5.l = wait
    s6.l = wait
    s7.l = wait
    s8.l = wait
    s9.l = wait
    SIGMA = 13
    LAMBDA = 404
    bus.N = 9
  -> Input: 1.2 <-
    bus.event = begin
    bus.cd_id = 0
    s0.event = begin
    s1.event = stutter
    s2.event = stutter
    s3.event = stutter
    s4.event = stutter
    s5.event = stutter
    s6.event = stutter
    s7.event = stutter
    s8.event = stutter
    s9.event = stutter
    bus.evt_cd = FALSE
    bus.evt_busy = FALSE
    bus.evt_end = FALSE
    bus.evt_begin = TRUE
    bus.evt_stutter = FALSE
    s0.evt_cd = FALSE
    s0.evt_busy = FALSE
    s0.evt_end = FALSE
    s0.evt_begin = TRUE
    s0.evt_stutter = FALSE
    s1.evt_cd = FALSE
    s1.evt_busy = FALSE
    s1.evt_end = FALSE
    s1.evt_begin = FALSE
    s1.evt_stutter = TRUE
    s2.evt_cd = FALSE
    s2.evt_busy = FALSE
    s2.evt_end = FALSE
    s2.evt_begin = FALSE
    s2.evt_stutter = TRUE
    s3.evt_cd = FALSE
    s3.evt_busy = FALSE
    s3.evt_end = FALSE
    s3.evt_begin = FALSE
    s3.evt_stutter = TRUE
    s4.evt_cd = FALSE
    s4.evt_busy = FALSE
    s4.evt_end = FALSE
    s4.evt_begin = FALSE
    s4.evt_stutter = TRUE
    s5.evt_cd = FALSE
    s5.evt_busy = FALSE
    s5.evt_end = FALSE
    s5.evt_begin = FALSE
    s5.evt_stutter = TRUE
    s6.evt_cd = FALSE
    s6.evt_busy = FALSE
    s6.evt_end = FALSE
    s6.evt_begin = FALSE
    s6.evt_stutter = TRUE
    s7.evt_cd = FALSE
    s7.evt_busy = FALSE
    s7.evt_end = FALSE
    s7.evt_begin = FALSE
    s7.evt_stutter = TRUE
    s8.evt_cd = FALSE
    s8.evt_busy = FALSE
    s8.evt_end = FALSE
    s8.evt_begin = FALSE
    s8.evt_stutter = TRUE
    s9.evt_cd = FALSE
    s9.evt_busy = FALSE
    s9.evt_end = FALSE
    s9.evt_begin = FALSE
    s9.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.2 <-
    bus.l = active
    s0.l = transm
  -> Input: 1.3 <-
    s0.event = stutter
    s7.event = begin
    s0.evt_begin = FALSE
    s0.evt_stutter = TRUE
    s7.evt_begin = TRUE
    s7.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.3 <-
    bus.l = collision
    s7.l = transm
  -- Loop starts here
  -- [ time elapse: time = diverging; delta = f'4/3 ] --
  -> State: 1.4 <-
    bus.x = f'4/3
    s0.x = f'4/3
    s1.x = f'4/3
    s2.x = f'4/3
    s3.x = f'4/3
    s4.x = f'4/3
    s5.x = f'4/3
    s6.x = f'4/3
    s7.x = f'4/3
    s8.x = f'4/3
    s9.x = f'4/3
  -- [ time elapse: time = diverging; delta = f'31/3 ] --
  -> State: 1.5 <-
    bus.x = f'35/3
    s0.x = f'35/3
    s1.x = f'35/3
    s2.x = f'35/3
    s3.x = f'35/3
    s4.x = f'35/3
    s5.x = f'35/3
    s6.x = f'35/3
    s7.x = f'35/3
    s8.x = f'35/3
    s9.x = f'35/3
  -> Input: 1.6 <-
    bus.event = cd
    s0.event = cd
    s7.event = stutter
    bus.evt_cd = TRUE
    bus.evt_begin = FALSE
    s0.evt_cd = TRUE
    s0.evt_stutter = FALSE
    s7.evt_begin = FALSE
    s7.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.6 <-
    bus.x = 0.0
    s0.x = 0.0
    bus.j = 1
    bus.l = transmit
    s0.l = retry
  -> Input: 1.7 <-
    bus.cd_id = 1
    s0.event = stutter
    s1.event = cd
    s0.evt_cd = FALSE
    s0.evt_stutter = TRUE
    s1.evt_cd = TRUE
    s1.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.7 <-
    s1.x = 0.0
    bus.j = 2
  -> Input: 1.8 <-
    bus.cd_id = 2
    s1.event = stutter
    s2.event = cd
    s1.evt_cd = FALSE
    s1.evt_stutter = TRUE
    s2.evt_cd = TRUE
    s2.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.8 <-
    s2.x = 0.0
    bus.j = 3
  -> Input: 1.9 <-
    bus.cd_id = 3
    s2.event = stutter
    s3.event = cd
    s2.evt_cd = FALSE
    s2.evt_stutter = TRUE
    s3.evt_cd = TRUE
    s3.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.9 <-
    s3.x = 0.0
    bus.j = 4
  -> Input: 1.10 <-
    bus.cd_id = 4
    s3.event = stutter
    s4.event = cd
    s3.evt_cd = FALSE
    s3.evt_stutter = TRUE
    s4.evt_cd = TRUE
    s4.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.10 <-
    s4.x = 0.0
    bus.j = 5
  -> Input: 1.11 <-
    bus.cd_id = 5
    s4.event = stutter
    s5.event = cd
    s4.evt_cd = FALSE
    s4.evt_stutter = TRUE
    s5.evt_cd = TRUE
    s5.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.11 <-
    s5.x = 0.0
    bus.j = 6
  -> Input: 1.12 <-
    bus.cd_id = 6
    s5.event = stutter
    s6.event = cd
    s5.evt_cd = FALSE
    s5.evt_stutter = TRUE
    s6.evt_cd = TRUE
    s6.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.12 <-
    s6.x = 0.0
    bus.j = 7
  -> Input: 1.13 <-
    bus.cd_id = 7
    s6.event = stutter
    s7.event = cd
    s6.evt_cd = FALSE
    s6.evt_stutter = TRUE
    s7.evt_cd = TRUE
    s7.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.13 <-
    s7.x = 0.0
    bus.j = 8
    s7.l = retry
  -> Input: 1.14 <-
    bus.cd_id = 8
    s7.event = stutter
    s8.event = cd
    s7.evt_cd = FALSE
    s7.evt_stutter = TRUE
    s8.evt_cd = TRUE
    s8.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.14 <-
    s8.x = 0.0
    bus.j = 9
  -> Input: 1.15 <-
    bus.cd_id = 9
    s8.event = stutter
    s9.event = cd
    s8.evt_cd = FALSE
    s8.evt_stutter = TRUE
    s9.evt_cd = TRUE
    s9.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.15 <-
    s9.x = 0.0
    bus.j = 0
    bus.l = idle
  -> Input: 1.16 <-
    bus.event = begin
    bus.cd_id = 8
    s0.event = begin
    s9.event = stutter
    bus.evt_cd = FALSE
    bus.evt_begin = TRUE
    s0.evt_begin = TRUE
    s0.evt_stutter = FALSE
    s9.evt_cd = FALSE
    s9.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.16 <-
    bus.l = active
    s0.l = transm
  -> Input: 1.17 <-
    bus.cd_id = 1
    s0.event = stutter
    s7.event = begin
    s0.evt_begin = FALSE
    s0.evt_stutter = TRUE
    s7.evt_begin = TRUE
    s7.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.17 <-
    bus.l = collision
    s7.l = transm
  -- [ time elapse: time = diverging; delta = f'4/3 ] --
  -> State: 1.18 <-
    bus.x = f'4/3
    s0.x = f'4/3
    s1.x = f'4/3
    s2.x = f'4/3
    s3.x = f'4/3
    s4.x = f'4/3
    s5.x = f'4/3
    s6.x = f'4/3
    s7.x = f'4/3
    s8.x = f'4/3
    s9.x = f'4/3
SUCCESS 
