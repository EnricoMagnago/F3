*** This is nuXmv 2.0.0 (compiled on Sun Mar 14 22:37:19 2021)
*** Copyright (c) 2014-2021, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2021, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- no proof or counterexample found with bound 0
-- no proof or counterexample found with bound 1
-- no proof or counterexample found with bound 2
-- no proof or counterexample found with bound 3
-- no proof or counterexample found with bound 4
-- no proof or counterexample found with bound 5
-- no proof or counterexample found with bound 6
-- no proof or counterexample found with bound 7
-- no proof or counterexample found with bound 8
-- no proof or counterexample found with bound 9
-- no proof or counterexample found with bound 10
-- no proof or counterexample found with bound 11
-- no proof or counterexample found with bound 12
-- no proof or counterexample found with bound 13
-- no proof or counterexample found with bound 14
-- no proof or counterexample found with bound 15
-- no proof or counterexample found with bound 16
-- no proof or counterexample found with bound 17
-- no proof or counterexample found with bound 18
-- no proof or counterexample found with bound 19
-- no proof or counterexample found with bound 20
-- LTL specification  G ( F st0.l = y_async)  is false
-- as demonstrated by the following execution sequence
Trace Description: IC3 smt counterexample 
Trace Type: Counterexample 
Infinite Trace diverging symbols: r.x, st0.x, st0.y, st0.z, st1.x, st1.y, st1.z, st2.x, st2.y, st2.z, st3.x, st3.y, st3.z
  -> State: 1.1 <-
    r.x = 0.0
    st0.x = 0.0
    st0.y = 0.0
    st0.z = 0.0
    st1.x = 0.0
    st1.y = 0.0
    st1.z = 0.0
    st2.x = 0.0
    st2.y = 0.0
    st2.z = 0.0
    st3.x = 0.0
    st3.y = 0.0
    st3.z = 0.0
    r.l = ring_to_counter
    r.counter = 0
    st0.l = z_idle
    st1.l = z_idle
    st2.l = z_idle
    st3.l = z_idle
    TRTT = 220
    TD = 0
    SA = 20
    N = 3
  -> Input: 1.2 <-
    r.event = tt
    r.evt_id = 0
    st0.event = tt
    st1.event = stutter
    st2.event = stutter
    st3.event = stutter
    r.evt_tt = TRUE
    r.evt_rt = FALSE
    r.evt_stutter = FALSE
    st0.evt_tt = TRUE
    st0.evt_rt = FALSE
    st0.evt_move = FALSE
    st0.evt_stutter = FALSE
    st1.evt_tt = FALSE
    st1.evt_rt = FALSE
    st1.evt_move = FALSE
    st1.evt_stutter = TRUE
    st2.evt_tt = FALSE
    st2.evt_rt = FALSE
    st2.evt_move = FALSE
    st2.evt_stutter = TRUE
    st3.evt_tt = FALSE
    st3.evt_rt = FALSE
    st3.evt_move = FALSE
    st3.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.2 <-
    r.l = ring_counter
    st0.l = z_sync
  -- [ time elapse: time = 0.0; delta = f'3/8 ] --
  -> State: 1.3 <-
    r.x = f'3/8
    st0.x = f'3/8
    st0.y = f'3/8
    st0.z = f'3/8
    st1.x = f'3/8
    st1.y = f'3/8
    st1.z = f'3/8
    st2.x = f'3/8
    st2.y = f'3/8
    st2.z = f'3/8
    st3.x = f'3/8
    st3.y = f'3/8
    st3.z = f'3/8
  -- [ time elapse: time = f'3/8; delta = f'157/8 ] --
  -> State: 1.4 <-
    r.x = 20.0
    st0.x = 20.0
    st0.y = 20.0
    st0.z = 20.0
    st1.x = 20.0
    st1.y = 20.0
    st1.z = 20.0
    st2.x = 20.0
    st2.y = 20.0
    st2.z = 20.0
    st3.x = 20.0
    st3.y = 20.0
    st3.z = 20.0
  -> Input: 1.5 <-
    r.event = stutter
    st0.event = move
    r.evt_tt = FALSE
    r.evt_stutter = TRUE
    st0.evt_tt = FALSE
    st0.evt_move = TRUE
  -- [ discrete transition ] --
  -> State: 1.5 <-
    st0.l = z_async
  -- [ time elapse: time = 20.0; delta = f'3/8 ] --
  -> State: 1.6 <-
    r.x = f'163/8
    st0.x = f'163/8
    st0.y = f'163/8
    st0.z = f'163/8
    st1.x = f'163/8
    st1.y = f'163/8
    st1.z = f'163/8
    st2.x = f'163/8
    st2.y = f'163/8
    st2.z = f'163/8
    st3.x = f'163/8
    st3.y = f'163/8
    st3.z = f'163/8
  -- [ time elapse: time = f'163/8; delta = f'1597/8 ] --
  -> State: 1.7 <-
    r.x = 220.0
    st0.x = 220.0
    st0.y = 220.0
    st0.z = 220.0
    st1.x = 220.0
    st1.y = 220.0
    st1.z = 220.0
    st2.x = 220.0
    st2.y = 220.0
    st2.z = 220.0
    st3.x = 220.0
    st3.y = 220.0
    st3.z = 220.0
  -> Input: 1.8 <-
    r.event = rt
    st0.event = rt
    r.evt_rt = TRUE
    r.evt_stutter = FALSE
    st0.evt_rt = TRUE
    st0.evt_move = FALSE
  -- [ discrete transition ] --
  -> State: 1.8 <-
    r.x = 0.0
    r.l = ring_to_counter
    r.counter = 1
    st0.l = y_idle
  -> Input: 1.9 <-
    r.event = tt
    r.evt_id = 1
    st0.event = stutter
    st1.event = tt
    r.evt_tt = TRUE
    r.evt_rt = FALSE
    st0.evt_rt = FALSE
    st0.evt_stutter = TRUE
    st1.evt_tt = TRUE
    st1.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.9 <-
    st1.x = 0.0
    st1.y = 0.0
    r.l = ring_counter
    st1.l = z_sync
  -- [ time elapse: time = 220.0; delta = 17.0 ] --
  -> State: 1.10 <-
    r.x = 17.0
    st0.x = 237.0
    st0.y = 237.0
    st0.z = 237.0
    st1.x = 17.0
    st1.y = 17.0
    st1.z = 237.0
    st2.x = 237.0
    st2.y = 237.0
    st2.z = 237.0
    st3.x = 237.0
    st3.y = 237.0
    st3.z = 237.0
  -- [ time elapse: time = 237.0; delta = 3.0 ] --
  -> State: 1.11 <-
    r.x = 20.0
    st0.x = 240.0
    st0.y = 240.0
    st0.z = 240.0
    st1.x = 20.0
    st1.y = 20.0
    st1.z = 240.0
    st2.x = 240.0
    st2.y = 240.0
    st2.z = 240.0
    st3.x = 240.0
    st3.y = 240.0
    st3.z = 240.0
  -> Input: 1.12 <-
    r.event = rt
    st1.event = rt
    r.evt_tt = FALSE
    r.evt_rt = TRUE
    st1.evt_tt = FALSE
    st1.evt_rt = TRUE
  -- [ discrete transition ] --
  -> State: 1.12 <-
    r.x = 0.0
    r.l = ring_to_counter
    r.counter = 2
    st1.l = y_idle
  -> Input: 1.13 <-
    r.event = tt
    r.evt_id = 2
    st1.event = stutter
    st2.event = tt
    r.evt_tt = TRUE
    r.evt_rt = FALSE
    st1.evt_rt = FALSE
    st1.evt_stutter = TRUE
    st2.evt_tt = TRUE
    st2.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.13 <-
    st2.x = 0.0
    st2.y = 0.0
    r.l = ring_counter
    st2.l = z_sync
  -- [ time elapse: time = 240.0; delta = f'3/8 ] --
  -> State: 1.14 <-
    r.x = f'3/8
    st0.x = f'1923/8
    st0.y = f'1923/8
    st0.z = f'1923/8
    st1.x = f'163/8
    st1.y = f'163/8
    st1.z = f'1923/8
    st2.x = f'3/8
    st2.y = f'3/8
    st2.z = f'1923/8
    st3.x = f'1923/8
    st3.y = f'1923/8
    st3.z = f'1923/8
  -- [ time elapse: time = f'1923/8; delta = f'157/8 ] --
  -> State: 1.15 <-
    r.x = 20.0
    st0.x = 260.0
    st0.y = 260.0
    st0.z = 260.0
    st1.x = 40.0
    st1.y = 40.0
    st1.z = 260.0
    st2.x = 20.0
    st2.y = 20.0
    st2.z = 260.0
    st3.x = 260.0
    st3.y = 260.0
    st3.z = 260.0
  -> Input: 1.16 <-
    r.event = rt
    st2.event = rt
    r.evt_tt = FALSE
    r.evt_rt = TRUE
    st2.evt_tt = FALSE
    st2.evt_rt = TRUE
  -- [ discrete transition ] --
  -> State: 1.16 <-
    r.x = 0.0
    r.l = ring_to_counter
    r.counter = 3
    st2.l = y_idle
  -> Input: 1.17 <-
    r.event = tt
    r.evt_id = 3
    st2.event = stutter
    st3.event = tt
    r.evt_tt = TRUE
    r.evt_rt = FALSE
    st2.evt_rt = FALSE
    st2.evt_stutter = TRUE
    st3.evt_tt = TRUE
    st3.evt_stutter = FALSE
  -- [ discrete transition ] --
  -> State: 1.17 <-
    st3.x = 0.0
    st3.y = 0.0
    r.l = ring_counter
    st3.l = z_sync
  -- [ time elapse: time = 260.0; delta = f'3/8 ] --
  -> State: 1.18 <-
    r.x = f'3/8
    st0.x = f'2083/8
    st0.y = f'2083/8
    st0.z = f'2083/8
    st1.x = f'323/8
    st1.y = f'323/8
    st1.z = f'2083/8
    st2.x = f'163/8
    st2.y = f'163/8
    st2.z = f'2083/8
    st3.x = f'3/8
    st3.y = f'3/8
    st3.z = f'2083/8
  -- [ time elapse: time = f'2083/8; delta = f'157/8 ] --
  -> State: 1.19 <-
    r.x = 20.0
    st0.x = 280.0
    st0.y = 280.0
    st0.z = 280.0
    st1.x = 60.0
    st1.y = 60.0
    st1.z = 280.0
    st2.x = 40.0
    st2.y = 40.0
    st2.z = 280.0
    st3.x = 20.0
    st3.y = 20.0
    st3.z = 280.0
  -> Input: 1.20 <-
    r.event = rt
    st3.event = rt
    r.evt_tt = FALSE
    r.evt_rt = TRUE
    st3.evt_tt = FALSE
    st3.evt_rt = TRUE
  -- [ discrete transition ] --
  -> State: 1.20 <-
    r.x = 0.0
    r.l = ring_to_counter
    r.counter = 0
    st3.l = y_idle
  -> Input: 1.21 <-
    r.event = tt
    r.evt_id = 0
    st0.event = tt
    st3.event = stutter
    r.evt_tt = TRUE
    r.evt_rt = FALSE
    st0.evt_tt = TRUE
    st0.evt_stutter = FALSE
    st3.evt_rt = FALSE
    st3.evt_stutter = TRUE
  -- [ discrete transition ] --
  -> State: 1.21 <-
    st0.x = 0.0
    st0.z = 0.0
    r.l = ring_counter
    st0.l = y_sync
  -- Loop starts here
  -- [ time elapse: time = diverging; delta = f'1763/8 ] --
  -> State: 1.22 <-
    r.x = r.x + f'1763/8
    st0.x = st0.x + f'1763/8
    st0.y = st0.y + f'1763/8
    st0.z = st0.z + f'1763/8
    st1.x = st1.x + f'1763/8
    st1.y = st1.y + f'1763/8
    st1.z = st1.z + f'1763/8
    st2.x = st2.x + f'1763/8
    st2.y = st2.y + f'1763/8
    st2.z = st2.z + f'1763/8
    st3.x = st3.x + f'1763/8
    st3.y = st3.y + f'1763/8
    st3.z = st3.z + f'1763/8
  -- [ time elapse: time = diverging; delta = f'27/8 ] --
  -> State: 1.23 <-
    r.x = r.x + f'27/8
    st0.x = st0.x + f'27/8
    st0.y = st0.y + f'27/8
    st0.z = st0.z + f'27/8
    st1.x = st1.x + f'27/8
    st1.y = st1.y + f'27/8
    st1.z = st1.z + f'27/8
    st2.x = st2.x + f'27/8
    st2.y = st2.y + f'27/8
    st2.z = st2.z + f'27/8
    st3.x = st3.x + f'27/8
    st3.y = st3.y + f'27/8
    st3.z = st3.z + f'27/8
  -- [ time elapse: time = diverging; delta = f'3/8 ] --
  -> State: 1.24 <-
    r.x = r.x + f'3/8
    st0.x = st0.x + f'3/8
    st0.y = st0.y + f'3/8
    st0.z = st0.z + f'3/8
    st1.x = st1.x + f'3/8
    st1.y = st1.y + f'3/8
    st1.z = st1.z + f'3/8
    st2.x = st2.x + f'3/8
    st2.y = st2.y + f'3/8
    st2.z = st2.z + f'3/8
    st3.x = st3.x + f'3/8
    st3.y = st3.y + f'3/8
    st3.z = st3.z + f'3/8
SUCCESS 
