*** This is nuXmv 2.0.0 (compiled on Sun Mar 14 22:37:19 2021)
*** Copyright (c) 2014-2021, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2021, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- no proof or counterexample found with bound 0
-- no proof or counterexample found with bound 1
-- no proof or counterexample found with bound 2
-- no proof or counterexample found with bound 3
-- no proof or counterexample found with bound 4
-- LTL specification ( G ( F v1 = 1) ->  G ( F p0.l = CS7))  is false
-- as demonstrated by the following execution sequence
Trace Description: IC3 smt counterexample 
Trace Type: Counterexample 
Infinite Trace diverging symbols: p0.c, p1.c, p2.c, p3.c, p4.c, p5.c, p6.c, p7.c, p8.c, p9.c, p10.c, p11.c, p12.c, p13.c
  -> State: 1.1 <-
    p0.c = 0.0
    p1.c = 0.0
    p2.c = 0.0
    p3.c = 0.0
    p4.c = 0.0
    p5.c = 0.0
    p6.c = 0.0
    p7.c = 0.0
    p8.c = 0.0
    p9.c = 0.0
    p10.c = 0.0
    p11.c = 0.0
    p12.c = 0.0
    p13.c = 0.0
    v1 = 1
    v2 = FALSE
    p0.l = L1
    p1.l = L1
    p2.l = L1
    p3.l = L1
    p4.l = L1
    p5.l = L1
    p6.l = L1
    p7.l = L1
    p8.l = L1
    p9.l = L1
    p10.l = L1
    p11.l = L1
    p12.l = L1
    p13.l = L1
    _T = 16
  -- [ time elapse: time = 0.0; delta = 23.0 ] --
  -> State: 1.2 <-
    p0.c = 23.0
    p1.c = 23.0
    p2.c = 23.0
    p3.c = 23.0
    p4.c = 23.0
    p5.c = 23.0
    p6.c = 23.0
    p7.c = 23.0
    p8.c = 23.0
    p9.c = 23.0
    p10.c = 23.0
    p11.c = 23.0
    p12.c = 23.0
    p13.c = 23.0
  -- Loop starts here
  -- [ time elapse: time = diverging; delta = 7.0 ] --
  -> State: 1.3 <-
    p0.c = p0.c + 7.0
    p1.c = p1.c + 7.0
    p2.c = p2.c + 7.0
    p3.c = p3.c + 7.0
    p4.c = p4.c + 7.0
    p5.c = p5.c + 7.0
    p6.c = p6.c + 7.0
    p7.c = p7.c + 7.0
    p8.c = p8.c + 7.0
    p9.c = p9.c + 7.0
    p10.c = p10.c + 7.0
    p11.c = p11.c + 7.0
    p12.c = p12.c + 7.0
    p13.c = p13.c + 7.0
  -- [ time elapse: time = diverging; delta = 21.0 ] --
  -> State: 1.4 <-
    p0.c = p0.c + 21.0
    p1.c = p1.c + 21.0
    p2.c = p2.c + 21.0
    p3.c = p3.c + 21.0
    p4.c = p4.c + 21.0
    p5.c = p5.c + 21.0
    p6.c = p6.c + 21.0
    p7.c = p7.c + 21.0
    p8.c = p8.c + 21.0
    p9.c = p9.c + 21.0
    p10.c = p10.c + 21.0
    p11.c = p11.c + 21.0
    p12.c = p12.c + 21.0
    p13.c = p13.c + 21.0
  -- [ time elapse: time = diverging; delta = 7.0 ] --
  -> State: 1.5 <-
    p0.c = p0.c + 7.0
    p1.c = p1.c + 7.0
    p2.c = p2.c + 7.0
    p3.c = p3.c + 7.0
    p4.c = p4.c + 7.0
    p5.c = p5.c + 7.0
    p6.c = p6.c + 7.0
    p7.c = p7.c + 7.0
    p8.c = p8.c + 7.0
    p9.c = p9.c + 7.0
    p10.c = p10.c + 7.0
    p11.c = p11.c + 7.0
    p12.c = p12.c + 7.0
    p13.c = p13.c + 7.0
SUCCESS 
