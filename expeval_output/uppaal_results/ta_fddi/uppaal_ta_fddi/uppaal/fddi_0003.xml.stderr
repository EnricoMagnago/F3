
State

( RING.ring_to_counter ST0.station_z_idle ST1.station_z_idle ST2.station_z_idle )
RING.x<=0, RING.x-ST0.x<=0, RING.x-ST0.y<=0, RING.x-ST0.z<=0, RING.x-ST1.x<=0, RING.x-ST1.y<=0, RING.x-ST1.z<=0, RING.x-ST2.x<=0, RING.x-ST2.y<=0, RING.x-ST2.z<=0, ST0.x<=0, ST0.x-RING.x<=0, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=0, ST0.x-ST1.y<=0, ST0.x-ST1.z<=0, ST0.x-ST2.x<=0, ST0.x-ST2.y<=0, ST0.x-ST2.z<=0, ST0.y<=0, ST0.y-RING.x<=0, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=0, ST0.y-ST1.y<=0, ST0.y-ST1.z<=0, ST0.y-ST2.x<=0, ST0.y-ST2.y<=0, ST0.y-ST2.z<=0, ST0.z<=0, ST0.z-RING.x<=0, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=0, ST0.z-ST1.y<=0, ST0.z-ST1.z<=0, ST0.z-ST2.x<=0, ST0.z-ST2.y<=0, ST0.z-ST2.z<=0, ST1.x<=0, ST1.x-RING.x<=0, ST1.x-ST0.x<=0, ST1.x-ST0.y<=0, ST1.x-ST0.z<=0, ST1.x-ST1.y<=0, ST1.x-ST1.z<=0, ST1.x-ST2.x<=0, ST1.x-ST2.y<=0, ST1.x-ST2.z<=0, ST1.y<=0, ST1.y-RING.x<=0, ST1.y-ST0.x<=0, ST1.y-ST0.y<=0, ST1.y-ST0.z<=0, ST1.y-ST1.x<=0, ST1.y-ST1.z<=0, ST1.y-ST2.x<=0, ST1.y-ST2.y<=0, ST1.y-ST2.z<=0, ST1.z<=0, ST1.z-RING.x<=0, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=0, ST1.z-ST1.y<=0, ST1.z-ST2.x<=0, ST1.z-ST2.y<=0, ST1.z-ST2.z<=0, ST2.x<=0, ST2.x-RING.x<=0, ST2.x-ST0.x<=0, ST2.x-ST0.y<=0, ST2.x-ST0.z<=0, ST2.x-ST1.x<=0, ST2.x-ST1.y<=0, ST2.x-ST1.z<=0, ST2.x-ST2.y<=0, ST2.x-ST2.z<=0, ST2.y<=0, ST2.y-RING.x<=0, ST2.y-ST0.x<=0, ST2.y-ST0.y<=0, ST2.y-ST0.z<=0, ST2.y-ST1.x<=0, ST2.y-ST1.y<=0, ST2.y-ST1.z<=0, ST2.y-ST2.x<=0, ST2.y-ST2.z<=0, ST2.z<=0, ST2.z-RING.x<=0, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=0, ST2.z-ST1.y<=0, ST2.z-ST1.z<=0, ST2.z-ST2.x<=0, ST2.z-ST2.y<=0 RING.counter=0 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  RING.ring_to_counter->RING.ring_counter { x <= td, tt[counter]!, 1 }
  ST0.station_z_idle->ST0.station_z_sync { 1, tt[id]?, y := 0, x := 0 }

State

( RING.ring_counter ST0.station_z_sync ST1.station_z_idle ST2.station_z_idle )
RING.x<=20, RING.x-ST0.x<=0, RING.x-ST0.y<=0, RING.x-ST0.z<=0, RING.x-ST1.x<=0, RING.x-ST1.y<=0, RING.x-ST1.z<=0, RING.x-ST2.x<=0, RING.x-ST2.y<=0, RING.x-ST2.z<=0, ST0.x<=20, ST0.x-RING.x<=0, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=0, ST0.x-ST1.y<=0, ST0.x-ST1.z<=0, ST0.x-ST2.x<=0, ST0.x-ST2.y<=0, ST0.x-ST2.z<=0, ST0.y<=20, ST0.y-RING.x<=0, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=0, ST0.y-ST1.y<=0, ST0.y-ST1.z<=0, ST0.y-ST2.x<=0, ST0.y-ST2.y<=0, ST0.y-ST2.z<=0, ST0.z<=20, ST0.z-RING.x<=0, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=0, ST0.z-ST1.y<=0, ST0.z-ST1.z<=0, ST0.z-ST2.x<=0, ST0.z-ST2.y<=0, ST0.z-ST2.z<=0, ST1.x<=20, ST1.x-RING.x<=0, ST1.x-ST0.x<=0, ST1.x-ST0.y<=0, ST1.x-ST0.z<=0, ST1.x-ST1.y<=0, ST1.x-ST1.z<=0, ST1.x-ST2.x<=0, ST1.x-ST2.y<=0, ST1.x-ST2.z<=0, ST1.y<=20, ST1.y-RING.x<=0, ST1.y-ST0.x<=0, ST1.y-ST0.y<=0, ST1.y-ST0.z<=0, ST1.y-ST1.x<=0, ST1.y-ST1.z<=0, ST1.y-ST2.x<=0, ST1.y-ST2.y<=0, ST1.y-ST2.z<=0, ST1.z<=20, ST1.z-RING.x<=0, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=0, ST1.z-ST1.y<=0, ST1.z-ST2.x<=0, ST1.z-ST2.y<=0, ST1.z-ST2.z<=0, ST2.x<=20, ST2.x-RING.x<=0, ST2.x-ST0.x<=0, ST2.x-ST0.y<=0, ST2.x-ST0.z<=0, ST2.x-ST1.x<=0, ST2.x-ST1.y<=0, ST2.x-ST1.z<=0, ST2.x-ST2.y<=0, ST2.x-ST2.z<=0, ST2.y<=20, ST2.y-RING.x<=0, ST2.y-ST0.x<=0, ST2.y-ST0.y<=0, ST2.y-ST0.z<=0, ST2.y-ST1.x<=0, ST2.y-ST1.y<=0, ST2.y-ST1.z<=0, ST2.y-ST2.x<=0, ST2.y-ST2.z<=0, ST2.z<=20, ST2.z-RING.x<=0, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=0, ST2.z-ST1.y<=0, ST2.z-ST1.z<=0, ST2.z-ST2.x<=0, ST2.z-ST2.y<=0 RING.counter=0 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  ST0.station_z_sync->ST0.station_z_async { x >= SA && z < TRTT, tau, 1 }

State

( RING.ring_counter ST0.station_z_async ST1.station_z_idle ST2.station_z_idle )
RING.x>=20, ST0.x>=20, ST0.y>=20, ST0.z>=20, ST1.x>=20, ST1.y>=20, ST1.z>=20, ST2.x>=20, ST2.y>=20, ST2.z>=20, RING.x<=170, RING.x-ST0.x<=0, RING.x-ST0.y<=0, RING.x-ST0.z<=0, RING.x-ST1.x<=0, RING.x-ST1.y<=0, RING.x-ST1.z<=0, RING.x-ST2.x<=0, RING.x-ST2.y<=0, RING.x-ST2.z<=0, ST0.x<=170, ST0.x-RING.x<=0, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=0, ST0.x-ST1.y<=0, ST0.x-ST1.z<=0, ST0.x-ST2.x<=0, ST0.x-ST2.y<=0, ST0.x-ST2.z<=0, ST0.y<=170, ST0.y-RING.x<=0, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=0, ST0.y-ST1.y<=0, ST0.y-ST1.z<=0, ST0.y-ST2.x<=0, ST0.y-ST2.y<=0, ST0.y-ST2.z<=0, ST0.z<=170, ST0.z-RING.x<=0, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=0, ST0.z-ST1.y<=0, ST0.z-ST1.z<=0, ST0.z-ST2.x<=0, ST0.z-ST2.y<=0, ST0.z-ST2.z<=0, ST1.x<=170, ST1.x-RING.x<=0, ST1.x-ST0.x<=0, ST1.x-ST0.y<=0, ST1.x-ST0.z<=0, ST1.x-ST1.y<=0, ST1.x-ST1.z<=0, ST1.x-ST2.x<=0, ST1.x-ST2.y<=0, ST1.x-ST2.z<=0, ST1.y<=170, ST1.y-RING.x<=0, ST1.y-ST0.x<=0, ST1.y-ST0.y<=0, ST1.y-ST0.z<=0, ST1.y-ST1.x<=0, ST1.y-ST1.z<=0, ST1.y-ST2.x<=0, ST1.y-ST2.y<=0, ST1.y-ST2.z<=0, ST1.z<=170, ST1.z-RING.x<=0, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=0, ST1.z-ST1.y<=0, ST1.z-ST2.x<=0, ST1.z-ST2.y<=0, ST1.z-ST2.z<=0, ST2.x<=170, ST2.x-RING.x<=0, ST2.x-ST0.x<=0, ST2.x-ST0.y<=0, ST2.x-ST0.z<=0, ST2.x-ST1.x<=0, ST2.x-ST1.y<=0, ST2.x-ST1.z<=0, ST2.x-ST2.y<=0, ST2.x-ST2.z<=0, ST2.y<=170, ST2.y-RING.x<=0, ST2.y-ST0.x<=0, ST2.y-ST0.y<=0, ST2.y-ST0.z<=0, ST2.y-ST1.x<=0, ST2.y-ST1.y<=0, ST2.y-ST1.z<=0, ST2.y-ST2.x<=0, ST2.y-ST2.z<=0, ST2.z<=170, ST2.z-RING.x<=0, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=0, ST2.z-ST1.y<=0, ST2.z-ST1.z<=0, ST2.z-ST2.x<=0, ST2.z-ST2.y<=0 RING.counter=0 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  ST0.station_z_async->ST0.station_y_idle { 1, rt[id]!, 1 }
  RING.ring_counter->RING.ring_to_counter { counter < N - 1, rt[counter]?, x := 0, counter := counter + 1 }

State

( RING.ring_to_counter ST0.station_y_idle ST1.station_z_idle ST2.station_z_idle )
ST0.x>=20, ST0.y>=20, ST0.z>=20, ST1.x>=20, ST1.y>=20, ST1.z>=20, ST2.x>=20, ST2.y>=20, ST2.z>=20, RING.x<=0, RING.x-ST0.x<=-20, RING.x-ST0.y<=-20, RING.x-ST0.z<=-20, RING.x-ST1.x<=-20, RING.x-ST1.y<=-20, RING.x-ST1.z<=-20, RING.x-ST2.x<=-20, RING.x-ST2.y<=-20, RING.x-ST2.z<=-20, ST0.x<=170, ST0.x-RING.x<=170, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=0, ST0.x-ST1.y<=0, ST0.x-ST1.z<=0, ST0.x-ST2.x<=0, ST0.x-ST2.y<=0, ST0.x-ST2.z<=0, ST0.y<=170, ST0.y-RING.x<=170, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=0, ST0.y-ST1.y<=0, ST0.y-ST1.z<=0, ST0.y-ST2.x<=0, ST0.y-ST2.y<=0, ST0.y-ST2.z<=0, ST0.z<=170, ST0.z-RING.x<=170, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=0, ST0.z-ST1.y<=0, ST0.z-ST1.z<=0, ST0.z-ST2.x<=0, ST0.z-ST2.y<=0, ST0.z-ST2.z<=0, ST1.x<=170, ST1.x-RING.x<=170, ST1.x-ST0.x<=0, ST1.x-ST0.y<=0, ST1.x-ST0.z<=0, ST1.x-ST1.y<=0, ST1.x-ST1.z<=0, ST1.x-ST2.x<=0, ST1.x-ST2.y<=0, ST1.x-ST2.z<=0, ST1.y<=170, ST1.y-RING.x<=170, ST1.y-ST0.x<=0, ST1.y-ST0.y<=0, ST1.y-ST0.z<=0, ST1.y-ST1.x<=0, ST1.y-ST1.z<=0, ST1.y-ST2.x<=0, ST1.y-ST2.y<=0, ST1.y-ST2.z<=0, ST1.z<=170, ST1.z-RING.x<=170, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=0, ST1.z-ST1.y<=0, ST1.z-ST2.x<=0, ST1.z-ST2.y<=0, ST1.z-ST2.z<=0, ST2.x<=170, ST2.x-RING.x<=170, ST2.x-ST0.x<=0, ST2.x-ST0.y<=0, ST2.x-ST0.z<=0, ST2.x-ST1.x<=0, ST2.x-ST1.y<=0, ST2.x-ST1.z<=0, ST2.x-ST2.y<=0, ST2.x-ST2.z<=0, ST2.y<=170, ST2.y-RING.x<=170, ST2.y-ST0.x<=0, ST2.y-ST0.y<=0, ST2.y-ST0.z<=0, ST2.y-ST1.x<=0, ST2.y-ST1.y<=0, ST2.y-ST1.z<=0, ST2.y-ST2.x<=0, ST2.y-ST2.z<=0, ST2.z<=170, ST2.z-RING.x<=170, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=0, ST2.z-ST1.y<=0, ST2.z-ST1.z<=0, ST2.z-ST2.x<=0, ST2.z-ST2.y<=0 RING.counter=1 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  RING.ring_to_counter->RING.ring_counter { x <= td, tt[counter]!, 1 }
  ST1.station_z_idle->ST1.station_z_sync { 1, tt[id]?, y := 0, x := 0 }

State

( RING.ring_counter ST0.station_y_idle ST1.station_z_sync ST2.station_z_idle )
ST0.x>=20, ST0.y>=20, ST0.z>=20, ST1.z>=20, ST2.x>=20, ST2.y>=20, ST2.z>=20, RING.x<=20, RING.x-ST0.x<=-20, RING.x-ST0.y<=-20, RING.x-ST0.z<=-20, RING.x-ST1.x<=0, RING.x-ST1.y<=0, RING.x-ST1.z<=-20, RING.x-ST2.x<=-20, RING.x-ST2.y<=-20, RING.x-ST2.z<=-20, ST0.x<=190, ST0.x-RING.x<=170, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=170, ST0.x-ST1.y<=170, ST0.x-ST1.z<=0, ST0.x-ST2.x<=0, ST0.x-ST2.y<=0, ST0.x-ST2.z<=0, ST0.y<=190, ST0.y-RING.x<=170, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=170, ST0.y-ST1.y<=170, ST0.y-ST1.z<=0, ST0.y-ST2.x<=0, ST0.y-ST2.y<=0, ST0.y-ST2.z<=0, ST0.z<=190, ST0.z-RING.x<=170, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=170, ST0.z-ST1.y<=170, ST0.z-ST1.z<=0, ST0.z-ST2.x<=0, ST0.z-ST2.y<=0, ST0.z-ST2.z<=0, ST1.x<=20, ST1.x-RING.x<=0, ST1.x-ST0.x<=-20, ST1.x-ST0.y<=-20, ST1.x-ST0.z<=-20, ST1.x-ST1.y<=0, ST1.x-ST1.z<=-20, ST1.x-ST2.x<=-20, ST1.x-ST2.y<=-20, ST1.x-ST2.z<=-20, ST1.y<=20, ST1.y-RING.x<=0, ST1.y-ST0.x<=-20, ST1.y-ST0.y<=-20, ST1.y-ST0.z<=-20, ST1.y-ST1.x<=0, ST1.y-ST1.z<=-20, ST1.y-ST2.x<=-20, ST1.y-ST2.y<=-20, ST1.y-ST2.z<=-20, ST1.z<=190, ST1.z-RING.x<=170, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=170, ST1.z-ST1.y<=170, ST1.z-ST2.x<=0, ST1.z-ST2.y<=0, ST1.z-ST2.z<=0, ST2.x<=190, ST2.x-RING.x<=170, ST2.x-ST0.x<=0, ST2.x-ST0.y<=0, ST2.x-ST0.z<=0, ST2.x-ST1.x<=170, ST2.x-ST1.y<=170, ST2.x-ST1.z<=0, ST2.x-ST2.y<=0, ST2.x-ST2.z<=0, ST2.y<=190, ST2.y-RING.x<=170, ST2.y-ST0.x<=0, ST2.y-ST0.y<=0, ST2.y-ST0.z<=0, ST2.y-ST1.x<=170, ST2.y-ST1.y<=170, ST2.y-ST1.z<=0, ST2.y-ST2.x<=0, ST2.y-ST2.z<=0, ST2.z<=190, ST2.z-RING.x<=170, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=170, ST2.z-ST1.y<=170, ST2.z-ST1.z<=0, ST2.z-ST2.x<=0, ST2.z-ST2.y<=0 RING.counter=1 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  ST1.station_z_sync->ST1.station_y_idle { x >= SA && z >= TRTT, rt[id]!, 1 }
  RING.ring_counter->RING.ring_to_counter { counter < N - 1, rt[counter]?, x := 0, counter := counter + 1 }

State

( RING.ring_to_counter ST0.station_y_idle ST1.station_y_idle ST2.station_z_idle )
ST0.x>=170, ST0.y>=170, ST0.z>=170, ST1.x>=20, ST1.y>=20, ST1.z>=170, ST2.x>=170, ST2.y>=170, ST2.z>=170, RING.x<=0, RING.x-ST0.x<=-170, RING.x-ST0.y<=-170, RING.x-ST0.z<=-170, RING.x-ST1.x<=-20, RING.x-ST1.y<=-20, RING.x-ST1.z<=-170, RING.x-ST2.x<=-170, RING.x-ST2.y<=-170, RING.x-ST2.z<=-170, ST0.x<=190, ST0.x-RING.x<=190, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=170, ST0.x-ST1.y<=170, ST0.x-ST1.z<=0, ST0.x-ST2.x<=0, ST0.x-ST2.y<=0, ST0.x-ST2.z<=0, ST0.y<=190, ST0.y-RING.x<=190, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=170, ST0.y-ST1.y<=170, ST0.y-ST1.z<=0, ST0.y-ST2.x<=0, ST0.y-ST2.y<=0, ST0.y-ST2.z<=0, ST0.z<=190, ST0.z-RING.x<=190, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=170, ST0.z-ST1.y<=170, ST0.z-ST1.z<=0, ST0.z-ST2.x<=0, ST0.z-ST2.y<=0, ST0.z-ST2.z<=0, ST1.x<=20, ST1.x-RING.x<=20, ST1.x-ST0.x<=-150, ST1.x-ST0.y<=-150, ST1.x-ST0.z<=-150, ST1.x-ST1.y<=0, ST1.x-ST1.z<=-150, ST1.x-ST2.x<=-150, ST1.x-ST2.y<=-150, ST1.x-ST2.z<=-150, ST1.y<=20, ST1.y-RING.x<=20, ST1.y-ST0.x<=-150, ST1.y-ST0.y<=-150, ST1.y-ST0.z<=-150, ST1.y-ST1.x<=0, ST1.y-ST1.z<=-150, ST1.y-ST2.x<=-150, ST1.y-ST2.y<=-150, ST1.y-ST2.z<=-150, ST1.z<=190, ST1.z-RING.x<=190, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=170, ST1.z-ST1.y<=170, ST1.z-ST2.x<=0, ST1.z-ST2.y<=0, ST1.z-ST2.z<=0, ST2.x<=190, ST2.x-RING.x<=190, ST2.x-ST0.x<=0, ST2.x-ST0.y<=0, ST2.x-ST0.z<=0, ST2.x-ST1.x<=170, ST2.x-ST1.y<=170, ST2.x-ST1.z<=0, ST2.x-ST2.y<=0, ST2.x-ST2.z<=0, ST2.y<=190, ST2.y-RING.x<=190, ST2.y-ST0.x<=0, ST2.y-ST0.y<=0, ST2.y-ST0.z<=0, ST2.y-ST1.x<=170, ST2.y-ST1.y<=170, ST2.y-ST1.z<=0, ST2.y-ST2.x<=0, ST2.y-ST2.z<=0, ST2.z<=190, ST2.z-RING.x<=190, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=170, ST2.z-ST1.y<=170, ST2.z-ST1.z<=0, ST2.z-ST2.x<=0, ST2.z-ST2.y<=0 RING.counter=2 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  RING.ring_to_counter->RING.ring_counter { x <= td, tt[counter]!, 1 }
  ST2.station_z_idle->ST2.station_z_sync { 1, tt[id]?, y := 0, x := 0 }

State

( RING.ring_counter ST0.station_y_idle ST1.station_y_idle ST2.station_z_sync )
ST0.x>=170, ST0.y>=170, ST0.z>=170, ST1.x>=20, ST1.y>=20, ST1.z>=170, ST2.z>=170, RING.x<=20, RING.x-ST0.x<=-170, RING.x-ST0.y<=-170, RING.x-ST0.z<=-170, RING.x-ST1.x<=-20, RING.x-ST1.y<=-20, RING.x-ST1.z<=-170, RING.x-ST2.x<=0, RING.x-ST2.y<=0, RING.x-ST2.z<=-170, ST0.x<=210, ST0.x-RING.x<=190, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=170, ST0.x-ST1.y<=170, ST0.x-ST1.z<=0, ST0.x-ST2.x<=190, ST0.x-ST2.y<=190, ST0.x-ST2.z<=0, ST0.y<=210, ST0.y-RING.x<=190, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=170, ST0.y-ST1.y<=170, ST0.y-ST1.z<=0, ST0.y-ST2.x<=190, ST0.y-ST2.y<=190, ST0.y-ST2.z<=0, ST0.z<=210, ST0.z-RING.x<=190, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=170, ST0.z-ST1.y<=170, ST0.z-ST1.z<=0, ST0.z-ST2.x<=190, ST0.z-ST2.y<=190, ST0.z-ST2.z<=0, ST1.x<=40, ST1.x-RING.x<=20, ST1.x-ST0.x<=-150, ST1.x-ST0.y<=-150, ST1.x-ST0.z<=-150, ST1.x-ST1.y<=0, ST1.x-ST1.z<=-150, ST1.x-ST2.x<=20, ST1.x-ST2.y<=20, ST1.x-ST2.z<=-150, ST1.y<=40, ST1.y-RING.x<=20, ST1.y-ST0.x<=-150, ST1.y-ST0.y<=-150, ST1.y-ST0.z<=-150, ST1.y-ST1.x<=0, ST1.y-ST1.z<=-150, ST1.y-ST2.x<=20, ST1.y-ST2.y<=20, ST1.y-ST2.z<=-150, ST1.z<=210, ST1.z-RING.x<=190, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=170, ST1.z-ST1.y<=170, ST1.z-ST2.x<=190, ST1.z-ST2.y<=190, ST1.z-ST2.z<=0, ST2.x<=20, ST2.x-RING.x<=0, ST2.x-ST0.x<=-170, ST2.x-ST0.y<=-170, ST2.x-ST0.z<=-170, ST2.x-ST1.x<=-20, ST2.x-ST1.y<=-20, ST2.x-ST1.z<=-170, ST2.x-ST2.y<=0, ST2.x-ST2.z<=-170, ST2.y<=20, ST2.y-RING.x<=0, ST2.y-ST0.x<=-170, ST2.y-ST0.y<=-170, ST2.y-ST0.z<=-170, ST2.y-ST1.x<=-20, ST2.y-ST1.y<=-20, ST2.y-ST1.z<=-170, ST2.y-ST2.x<=0, ST2.y-ST2.z<=-170, ST2.z<=210, ST2.z-RING.x<=190, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=170, ST2.z-ST1.y<=170, ST2.z-ST1.z<=0, ST2.z-ST2.x<=190, ST2.z-ST2.y<=190 RING.counter=2 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  ST2.station_z_sync->ST2.station_y_idle { x >= SA && z >= TRTT, rt[id]!, 1 }
  RING.ring_counter->RING.ring_to_counter { counter == N - 1, rt[counter]?, x := 0, counter := 0 }

State

( RING.ring_to_counter ST0.station_y_idle ST1.station_y_idle ST2.station_y_idle )
ST0.x>=190, ST0.y>=190, ST0.z>=190, ST1.x>=40, ST1.y>=40, ST1.z>=190, ST2.x>=20, ST2.y>=20, ST2.z>=190, RING.x<=0, RING.x-ST0.x<=-190, RING.x-ST0.y<=-190, RING.x-ST0.z<=-190, RING.x-ST1.x<=-40, RING.x-ST1.y<=-40, RING.x-ST1.z<=-190, RING.x-ST2.x<=-20, RING.x-ST2.y<=-20, RING.x-ST2.z<=-190, ST0.x<=210, ST0.x-RING.x<=210, ST0.x-ST0.y<=0, ST0.x-ST0.z<=0, ST0.x-ST1.x<=170, ST0.x-ST1.y<=170, ST0.x-ST1.z<=0, ST0.x-ST2.x<=190, ST0.x-ST2.y<=190, ST0.x-ST2.z<=0, ST0.y<=210, ST0.y-RING.x<=210, ST0.y-ST0.x<=0, ST0.y-ST0.z<=0, ST0.y-ST1.x<=170, ST0.y-ST1.y<=170, ST0.y-ST1.z<=0, ST0.y-ST2.x<=190, ST0.y-ST2.y<=190, ST0.y-ST2.z<=0, ST0.z<=210, ST0.z-RING.x<=210, ST0.z-ST0.x<=0, ST0.z-ST0.y<=0, ST0.z-ST1.x<=170, ST0.z-ST1.y<=170, ST0.z-ST1.z<=0, ST0.z-ST2.x<=190, ST0.z-ST2.y<=190, ST0.z-ST2.z<=0, ST1.x<=40, ST1.x-RING.x<=40, ST1.x-ST0.x<=-150, ST1.x-ST0.y<=-150, ST1.x-ST0.z<=-150, ST1.x-ST1.y<=0, ST1.x-ST1.z<=-150, ST1.x-ST2.x<=20, ST1.x-ST2.y<=20, ST1.x-ST2.z<=-150, ST1.y<=40, ST1.y-RING.x<=40, ST1.y-ST0.x<=-150, ST1.y-ST0.y<=-150, ST1.y-ST0.z<=-150, ST1.y-ST1.x<=0, ST1.y-ST1.z<=-150, ST1.y-ST2.x<=20, ST1.y-ST2.y<=20, ST1.y-ST2.z<=-150, ST1.z<=210, ST1.z-RING.x<=210, ST1.z-ST0.x<=0, ST1.z-ST0.y<=0, ST1.z-ST0.z<=0, ST1.z-ST1.x<=170, ST1.z-ST1.y<=170, ST1.z-ST2.x<=190, ST1.z-ST2.y<=190, ST1.z-ST2.z<=0, ST2.x<=20, ST2.x-RING.x<=20, ST2.x-ST0.x<=-170, ST2.x-ST0.y<=-170, ST2.x-ST0.z<=-170, ST2.x-ST1.x<=-20, ST2.x-ST1.y<=-20, ST2.x-ST1.z<=-170, ST2.x-ST2.y<=0, ST2.x-ST2.z<=-170, ST2.y<=20, ST2.y-RING.x<=20, ST2.y-ST0.x<=-170, ST2.y-ST0.y<=-170, ST2.y-ST0.z<=-170, ST2.y-ST1.x<=-20, ST2.y-ST1.y<=-20, ST2.y-ST1.z<=-170, ST2.y-ST2.x<=0, ST2.y-ST2.z<=-170, ST2.z<=210, ST2.z-RING.x<=210, ST2.z-ST0.x<=0, ST2.z-ST0.y<=0, ST2.z-ST0.z<=0, ST2.z-ST1.x<=170, ST2.z-ST1.y<=170, ST2.z-ST1.z<=0, ST2.z-ST2.x<=190, ST2.z-ST2.y<=190 RING.counter=0 ST0.id=0 ST1.id=1 ST2.id=2 

Transitions:
  RING.ring_to_counter->RING.ring_counter { x <= td, tt[counter]!, 1 }
  ST0.station_y_idle->ST0.station_y_sync { 1, tt[id]?, z := 0, x := 0 }

State

( RING.ring_counter ST0.station_y_sync ST1.station_y_idle ST2.station_y_idle )
ST0.y>=190, ST1.x>=40, ST1.y>=40, ST1.z>=190, ST2.x>=20, ST2.y>=20, ST2.z>=190, RING.x-ST0.x<=0, RING.x-ST0.y<=-190, RING.x-ST0.z<=0, RING.x-ST1.x<=-40, RING.x-ST1.y<=-40, RING.x-ST1.z<=-190, RING.x-ST2.x<=-20, RING.x-ST2.y<=-20, RING.x-ST2.z<=-190, ST0.x-RING.x<=0, ST0.x-ST0.y<=-190, ST0.x-ST0.z<=0, ST0.x-ST1.x<=-40, ST0.x-ST1.y<=-40, ST0.x-ST1.z<=-190, ST0.x-ST2.x<=-20, ST0.x-ST2.y<=-20, ST0.x-ST2.z<=-190, ST0.y-RING.x<=210, ST0.y-ST0.x<=210, ST0.y-ST0.z<=210, ST0.y-ST1.x<=170, ST0.y-ST1.y<=170, ST0.y-ST1.z<=0, ST0.y-ST2.x<=190, ST0.y-ST2.y<=190, ST0.y-ST2.z<=0, ST0.z-RING.x<=0, ST0.z-ST0.x<=0, ST0.z-ST0.y<=-190, ST0.z-ST1.x<=-40, ST0.z-ST1.y<=-40, ST0.z-ST1.z<=-190, ST0.z-ST2.x<=-20, ST0.z-ST2.y<=-20, ST0.z-ST2.z<=-190, ST1.x-RING.x<=40, ST1.x-ST0.x<=40, ST1.x-ST0.y<=-150, ST1.x-ST0.z<=40, ST1.x-ST1.y<=0, ST1.x-ST1.z<=-150, ST1.x-ST2.x<=20, ST1.x-ST2.y<=20, ST1.x-ST2.z<=-150, ST1.y-RING.x<=40, ST1.y-ST0.x<=40, ST1.y-ST0.y<=-150, ST1.y-ST0.z<=40, ST1.y-ST1.x<=0, ST1.y-ST1.z<=-150, ST1.y-ST2.x<=20, ST1.y-ST2.y<=20, ST1.y-ST2.z<=-150, ST1.z-RING.x<=210, ST1.z-ST0.x<=210, ST1.z-ST0.y<=0, ST1.z-ST0.z<=210, ST1.z-ST1.x<=170, ST1.z-ST1.y<=170, ST1.z-ST2.x<=190, ST1.z-ST2.y<=190, ST1.z-ST2.z<=0, ST2.x-RING.x<=20, ST2.x-ST0.x<=20, ST2.x-ST0.y<=-170, ST2.x-ST0.z<=20, ST2.x-ST1.x<=-20, ST2.x-ST1.y<=-20, ST2.x-ST1.z<=-170, ST2.x-ST2.y<=0, ST2.x-ST2.z<=-170, ST2.y-RING.x<=20, ST2.y-ST0.x<=20, ST2.y-ST0.y<=-170, ST2.y-ST0.z<=20, ST2.y-ST1.x<=-20, ST2.y-ST1.y<=-20, ST2.y-ST1.z<=-170, ST2.y-ST2.x<=0, ST2.y-ST2.z<=-170, ST2.z-RING.x<=210, ST2.z-ST0.x<=210, ST2.z-ST0.y<=0, ST2.z-ST0.z<=210, ST2.z-ST1.x<=170, ST2.z-ST1.y<=170, ST2.z-ST1.z<=0, ST2.z-ST2.x<=190, ST2.z-ST2.y<=190 RING.counter=0 ST0.id=0 ST1.id=1 ST2.id=2 
real 1.02
user 0.08
sys 0.15
