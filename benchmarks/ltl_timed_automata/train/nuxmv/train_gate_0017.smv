@TIME_DOMAIN continuous
MODULE main
DEFINE
  a := 2;
  b := 5;
  c := 1;
  d := 2;
  e := 1;
VAR
  gate : Gate(c, d);
  controller : Controller(e);
  train0 : Train(a, b);
  train1 : Train(a, b);
  train2 : Train(a, b);
  train3 : Train(a, b);
  train4 : Train(a, b);
  train5 : Train(a, b);
  train6 : Train(a, b);
  train7 : Train(a, b);
  train8 : Train(a, b);
  train9 : Train(a, b);
  train10 : Train(a, b);
  train11 : Train(a, b);
  train12 : Train(a, b);
  train13 : Train(a, b);
  train14 : Train(a, b);
  train15 : Train(a, b);
  train16 : Train(a, b);


TRANS !train0.evt_stutter -> (train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train1.evt_stutter -> (train0.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train2.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train3.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train4.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train5.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train6.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train7.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train8.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train9.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train10.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train11.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train12.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train13.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train14.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train14.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train15.evt_stutter & train16.evt_stutter);
TRANS !train15.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train16.evt_stutter);
TRANS !train16.evt_stutter -> (train0.evt_stutter & train1.evt_stutter & train2.evt_stutter & train3.evt_stutter & train4.evt_stutter & train5.evt_stutter & train6.evt_stutter & train7.evt_stutter & train8.evt_stutter & train9.evt_stutter & train10.evt_stutter & train11.evt_stutter & train12.evt_stutter & train13.evt_stutter & train14.evt_stutter & train15.evt_stutter);


TRANS controller.evt_lower <-> gate.evt_lower;
TRANS controller.evt_rise <-> gate.evt_rise;
TRANS controller.evt_approach <-> (train0.evt_approach | train1.evt_approach | train2.evt_approach | train3.evt_approach | train4.evt_approach | train5.evt_approach | train6.evt_approach | train7.evt_approach | train8.evt_approach | train9.evt_approach | train10.evt_approach | train11.evt_approach | train12.evt_approach | train13.evt_approach | train14.evt_approach | train15.evt_approach | train16.evt_approach);
TRANS controller.evt_exit <-> (train0.evt_exit | train1.evt_exit | train2.evt_exit | train3.evt_exit | train4.evt_exit | train5.evt_exit | train6.evt_exit | train7.evt_exit | train8.evt_exit | train9.evt_exit | train10.evt_exit | train11.evt_exit | train12.evt_exit | train13.evt_exit | train14.evt_exit | train15.evt_exit | train16.evt_exit);

LTLSPEC G ((gate.l = g0 & next(gate.l) = g1) -> F (gate.l = g2 & next(gate.l) = g3));


MODULE Train(a, b)
DEFINE
  evt_stutter := event = stutter;
  evt_approach := event = approach;
  evt_exit := event = exit;
  evt_move := event = move;
IVAR event : {stutter, approach, exit, move};
VAR
  l : {t0, t1, t2, t3};
  x : clock;

INIT l = t0 & x = 0;

INVAR (l != t0) -> (x <= b);

TRANS evt_stutter -> (next(l) = l & next(x) = x);

-- t0 -> t1
TRANS (!evt_stutter & l = t0) -> (next(l) = t1 & evt_approach & next(x) = 0);
-- t1 -> t2
TRANS (!evt_stutter & l = t1) -> (next(l) = t2 & x > a & evt_move & next(x) = x);
-- t2 -> t3
TRANS (!evt_stutter & l = t2) -> (next(l) = t3 & evt_move & next(x) = x);
-- t3 -> t0
TRANS (!evt_stutter & l = t3) -> (next(l) = t0 & x <= b & evt_exit & next(x) = x);


MODULE Gate(c, d)
DEFINE
  evt_stutter := event = stutter;
  evt_lower := event = lower;
  evt_rise := event = rise;
  evt_move := event = move;
IVAR event : {stutter, lower, rise, move};
VAR
  l : {g0, g1, g2, g3};
  y : clock;

INIT l = g0 & y = 0;

INVAR l = g1 -> y <= c;
INVAR l = g3 -> y <= d;

TRANS evt_stutter -> (next(l) = l & next(y) = y);

-- g0 -> g1
TRANS (!evt_stutter & l = g0) -> (next(l) = g1 & evt_lower & next(y) = 0);
-- g1 -> g2
TRANS (!evt_stutter & l = g1) -> (next(l) = g2 & y <= c & evt_move & next(y) = y);
-- g2 -> g3
TRANS (!evt_stutter & l = g2) -> (next(l) = g3 & evt_rise & next(y) = 0);
-- g3 -> g0
TRANS (!evt_stutter & l = g3) -> (next(l) = g0 & y >= c & y <= d & evt_move & next(y) = y);

MODULE Controller(e)
DEFINE
  evt_stutter := event = stutter;
  evt_approach := event = approach;
  evt_exit := event = exit;
  evt_lower := event = lower;
  evt_rise := event = rise;
IVAR event : {stutter, approach, exit, lower, rise};
VAR
  cnt : 0..18;
  l : {c0, c1, c2, c3};
  z : clock;

INIT l = c0 & z = 0;

INVAR (l = c1 | l = c3) -> (z <= e);

TRANS evt_stutter -> (next(l) = l & next(z) = z & next(cnt) = cnt);

-- c0 -> c1
TRANS (!evt_stutter & l = c0) -> (next(l) = c1 & evt_approach & next(z) = 0 & next(cnt) = 1);
-- c1 -> [c1 | c2]
TRANS (!evt_stutter & l = c1) -> ((next(l) = c1 | next(l) = c2) & next(z) = z);
TRANS (!evt_stutter & l = c1 & next(l) = c1) -> ((evt_approach & next(cnt) = cnt + 1) | (evt_exit & next(cnt) = cnt - 1));
TRANS (l = c1 & next(l) = c2) -> (evt_lower & z = e & next(cnt) = cnt);
-- c2 -> [c2 | c3]
TRANS (!evt_stutter & l = c2) -> (next(l) = c2 | next(l) = c3);
TRANS (!evt_stutter & l = c2 & next(l) = c2) -> (next(z) = z & ((cnt > 1 & evt_exit & next(cnt) = cnt - 1) | (evt_approach & next(cnt) = cnt + 1)));
TRANS (l = c2 & next(l) = c3) -> (cnt = 1 & evt_exit & next(z) = 0 & next(cnt) = 0);
-- c3 -> [c2 | c0]
TRANS (!evt_stutter & l = c3) -> ((next(l) = c2 | next(l) = c0) & next(z) = z);
TRANS (l = c3 & next(l) = c2) -> (z <= e & evt_approach & next(cnt) = cnt + 1);
TRANS (l = c3 & next(l) = c0) -> (z <= e & evt_rise & next(cnt) = cnt);
