MODULE main
DEFINE
  _T := 16;

VAR
  v1 : 0..4;
  v2 : boolean;
  p0 : P(1, v1, v2, _T);
  p1 : P(2, v1, v2, _T);
  p2 : P(3, v1, v2, _T);


TRANS !(p0.evt = stutter & p1.evt = stutter & p2.evt = stutter);

MITLSPEC (FALSE SR (TRUE SU (v1 = 1))) -> (FALSE SR (TRUE SU (p0.l = CS7)));

MODULE P(id, v1, v2, _T)
VAR
  evt : {stutter, move};
  l : {L1, L2, L3, L4, L5, L6, CS7, L8, L9};
  c : clock((l = L1 & next(l) = L2) |
            (l = L4 & next(l) = L5) |
            (l = L5 & next(l) = L6) |
            (l = CS7 & next(l) = L8) |
            (l = L8 & next(l) = L9));

INIT l = L1;

INVAR (l = L2 | l = L5 | l = L8 | l = L9) -> c <= _T;

TRANS evt = stutter -> (next(l) = l);

-- L1 -> L2
TRANS (evt != stutter & l = L1) -> (v1 = 0 & next(l) = L2 & (next(v2) <-> v2) & next(v1) = v1);
-- L2 -> L3
TRANS (evt != stutter & l = L2) -> (next(v1) = id & next(l) = L3 & (next(v2) <-> v2));
-- L3 -> [L1 | L4]
TRANS (evt != stutter & l = L3) -> ((next(l) = L1 | next(l) = L4) & (next(v2) <-> v2) & next(v1) = v1);
TRANS (l = L3 & next(l) = L1) -> (v1 != id);
TRANS (l = L3 & next(l) = L4) -> (v1 = id & c > _T);
-- L4 -> [L1 | L5]
TRANS (evt != stutter & l = L4) -> ((next(l) = L1 | next(l) = L5) & (next(v2) <-> v2) & next(v1) = v1);
TRANS (l = L4 & next(l) = L1) -> (v2);
TRANS (l = L4 & next(l) = L5) -> (!v2);
-- L5 -> L6
TRANS (evt != stutter & l = L5) -> (next(l) = L6 & next(v2) & next(v1) = v1);
-- L6 -> [L1 | CS7]
TRANS (evt != stutter & l = L6) -> ((next(l) = L1 | next(l) = CS7) & (next(v2) <-> v2) & next(v1) = v1);
TRANS (l = L6 & next(l) = L1) -> (v1 != id);
TRANS (l = L6 & next(l) = CS7) -> (v1 = id);
-- CS7 -> L8
TRANS (evt != stutter & l = CS7) -> (next(l) = L8 & (next(v2) <-> v2) & next(v1) = v1);
-- L8 -> L9
TRANS (evt != stutter & l = L8) -> (next(l) = L9 & next(!v2) & next(v1) = v1);
-- L9 -> L1
TRANS (evt != stutter & l = L9) -> (next(l) = L1 & next(v1) = 0 & (next(v2) <-> v2));