<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
  <declaration>const int N = 24;
  const int A = 25;
  const int B = 50;
  typedef int[1, N] id_t;
  int id;
  chan cellenter[N + 1], cellexit[N + 1];
  int err_count = 0;</declaration>
  <template>
	<name>Counter</name>
	<location id="id0">
	  <name>initCount</name>
	</location>
	<location id="id1">
	  <name>initial</name>
	</location>
	<init ref="id1"/>
	<transition>
	  <source ref="id0"/>
	  <target ref="id0"/>
	  <label kind="guard">id &gt;= N</label>
	  <label kind="assignment">id := 1</label>
	</transition>
	<transition>
	  <source ref="id0"/>
	  <target ref="id0"/>
	  <label kind="guard">id &lt; N</label>
	  <label kind="assignment">id := id + 1</label>
	</transition>
	<transition>
	  <source ref="id1"/>
	  <target ref="id0"/>
	  <label kind="guard">id == 0</label>
	  <label kind="assignment">id := 1</label>
	</transition>
  </template>
  <template>
	<name>LTL</name>
	<location id="id2">
	</location>
	<location id="id3">
	  <name>not_all_error</name>
	  <label kind="invariant">err_count &lt; N</label>
	</location>
	<init ref="id2"/>
	<transition>
	  <source ref="id2"/>
	  <target ref="id2"/>
	</transition>
	<transition>
	  <source ref="id3"/>
	  <target ref="id3"/>
	</transition>
	<transition>
	  <source ref="id2"/>
	  <target ref="id3"/>
	</transition>
  </template>
  <template>
	<name>Arbiter</name>
	<parameter>const id_t i</parameter>
	<location id="id4">
	  <name>S0</name>
	</location>
	<location id="id5">
	  <name>S1</name>
	</location>
	<init ref="id5"/>
	<transition>
	  <source ref="id4"/>
	  <target ref="id5"/>
	  <label kind="synchronisation">cellexit[i]!</label>
	  <label kind="assignment">id := i</label>
	</transition>
	<transition>
	  <source ref="id5"/>
	  <target ref="id4"/>
	  <label kind="guard">id == i</label>
	  <label kind="synchronisation">cellenter[i]!</label>
	  <label kind="assignment">id := 0</label>
	</transition>
  </template>
  <template>
	<name>ProdCell</name>
	<parameter>const id_t i</parameter>
	<declaration>clock x;</declaration>
	<location id="id6">
	  <name>safe</name>
	</location>
	<location id="id7">
	  <name>testing2</name>
	  <label kind="invariant">x &lt;= A</label>
	</location>
	<location id="id8">
	  <name>error</name>
	</location>
	<location id="id9">
	  <name>critical</name>
	  <label kind="invariant">x &lt;= B</label>
	</location>
	<location id="id10">
	  <name>requesting</name>
	</location>
	<location id="id11">
	  <name>testing</name>
	  <label kind="invariant">x &lt;= A</label>
	</location>
	<location id="id12">
	  <name>notready</name>
	</location>
	<init ref="id12"/>
	<transition>
	  <source ref="id7"/>
	  <target ref="id6"/>
	  <label kind="guard">x &lt;= A - 1</label>
	</transition>
	<transition>
	  <source ref="id7"/>
	  <target ref="id8"/>
	  <label kind="guard">x &gt;= A</label>
	  <label kind="assignment">err_count := err_count + 1</label>
	</transition>
	<transition>
	  <source ref="id9"/>
	  <target ref="id8"/>
	  <label kind="guard">x &gt;= B</label>
	  <label kind="assignment">err_count := err_count + 1</label>
	</transition>
	<transition>
	  <source ref="id9"/>
	  <target ref="id7"/>
	  <label kind="guard">x &lt;= A - 1</label>
	  <label kind="synchronisation">cellexit[i]?</label>
	  <label kind="assignment">x := 0</label>
	</transition>
	<transition>
	  <source ref="id10"/>
	  <target ref="id9"/>
	  <label kind="synchronisation">cellenter[i]?</label>
	  <label kind="assignment">x := 0</label>
	</transition>
	<transition>
	  <source ref="id11"/>
	  <target ref="id10"/>
	  <label kind="guard">x &lt;= A - 1</label>
	</transition>
	<transition>
	  <source ref="id11"/>
	  <target ref="id12"/>
	  <label kind="guard">x &gt;= A</label>
	  <label kind="assignment">x := 0</label>
	</transition>
	<transition>
	  <source ref="id12"/>
	  <target ref="id11"/>
	  <label kind="guard">x &lt;= B</label>
	  <label kind="assignment">x := 0</label>
	</transition>
	<transition>
	  <source ref="id8"/>
	  <target ref="id8"/>
	</transition>
	<transition>
	  <source ref="id6"/>
	  <target ref="id12"/>
	</transition>
	<transition>
	  <source ref="id8"/>
	  <target ref="id8"/>
	</transition>
	<transition>
	  <source ref="id6"/>
	  <target ref="id12"/>
	</transition>
  </template>
  <system>ltl = LTL();
      A0 = Arbiter(1);
      A1 = Arbiter(2);
      A2 = Arbiter(3);
      A3 = Arbiter(4);
      A4 = Arbiter(5);
      A5 = Arbiter(6);
      A6 = Arbiter(7);
      A7 = Arbiter(8);
      A8 = Arbiter(9);
      A9 = Arbiter(10);
      A10 = Arbiter(11);
      A11 = Arbiter(12);
      A12 = Arbiter(13);
      A13 = Arbiter(14);
      A14 = Arbiter(15);
      A15 = Arbiter(16);
      A16 = Arbiter(17);
      A17 = Arbiter(18);
      A18 = Arbiter(19);
      A19 = Arbiter(20);
      A20 = Arbiter(21);
      A21 = Arbiter(22);
      A22 = Arbiter(23);
      A23 = Arbiter(24);

      PC0 = ProdCell(1);
      PC1 = ProdCell(2);
      PC2 = ProdCell(3);
      PC3 = ProdCell(4);
      PC4 = ProdCell(5);
      PC5 = ProdCell(6);
      PC6 = ProdCell(7);
      PC7 = ProdCell(8);
      PC8 = ProdCell(9);
      PC9 = ProdCell(10);
      PC10 = ProdCell(11);
      PC11 = ProdCell(12);
      PC12 = ProdCell(13);
      PC13 = ProdCell(14);
      PC14 = ProdCell(15);
      PC15 = ProdCell(16);
      PC16 = ProdCell(17);
      PC17 = ProdCell(18);
      PC18 = ProdCell(19);
      PC19 = ProdCell(20);
      PC20 = ProdCell(21);
      PC21 = ProdCell(22);
      PC22 = ProdCell(23);
      PC23 = ProdCell(24);

system Counter, ltl, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, PC11, PC12, PC13, PC14, PC15, PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23;</system>
</nta>
