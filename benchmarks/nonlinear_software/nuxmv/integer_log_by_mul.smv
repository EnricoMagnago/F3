-- SMV encondig of Pinteger_log_by_mul.java from benchmarks of paper "Disproving termination with overapproximation".
MODULE main
  VAR
    n : integer;
    d : integer;
    log : integer;
    f_mul : integer; -- firstMultiply
    pc : -1..8;

  -- cfg
  ASSIGN
  init(pc) := 0;
  next(pc) :=
    case
      pc = -1 : -1;
      pc = 0 & !(n >= 1) : -1;
      pc = 0 & n >= 1 : 1;
      pc = 1 & !(d >= 0) : -1;
      pc = 1 & d >= 0 : 2;
      pc = 2 & d < 2 : 3;
      pc = 2 & !(d < 2) : 8;
      pc = 3 : 4;
      pc = 4 : 5;
      pc = 5 & !(d <= n) : -1;
      pc = 5 & d <= n : 6;
      pc = 6 : 7;
      pc = 7 : 5;
      pc = 8 : -1;
    esac;

  -- constraints
  TRANS (pc = -1 & next(pc) = -1) -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 0 & next(pc) = -1) -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 0 & next(pc) = 1)  -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 1 & next(pc) = -1) -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 1 & next(pc) = 2)  -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 2 & next(pc) = 3)  -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 2 & next(pc) = 8)  -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 3 & next(pc) = 4)  -> (next(n) = n & next(d) = d & next(log) = 0 & next(f_mul) = f_mul);
  TRANS (pc = 4 & next(pc) = 5)  -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = d);
  TRANS (pc = 5 & next(pc) = -1) -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 5 & next(pc) = 6)  -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 6 & next(pc) = 7)  -> (next(n) = n & next(d) = d & next(log) = log+1 & next(f_mul) = f_mul);
  TRANS (pc = 7 & next(pc) = 5)  -> (next(n) = n & next(d) = d*f_mul & next(log) = log & next(f_mul) = f_mul);
  TRANS (pc = 8 & next(pc) = -1) -> (next(n) = n & next(d) = d & next(log) = log & next(f_mul) = f_mul);

  LTLSPEC NAME BENCH := F pc = -1;