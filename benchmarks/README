This directory contains a collection of software (non)termination and LTL model checking problems.
The benchmarks are organised in the following categories:
* LS : linear software programs,
* NS : non-linear software programs,
* ITS : LTL model checking on infinite state transition systems (directory `ltl_infinite_state`),
* TA : LTL model checking on timed automata (directory `ltl_timed_automata`)
* TTS : LTL model checking on timed transition systems (directory `ltl_timed_transition_system`)
* HS : LTL model checking on hybrid systems (directory `ltl_hybrid_system`)

Each benchmark is written in the input language of a number of tools.

In the following we briefly decribe the structure of each category.


## LS
The `software_nontermination` directory contains linear software benchmarks.
The benchmarks haven been taken from the C and C_Integer categories of [1].
We considered only nonterminating instances and software programs without recursion and dynamic allocation.
The C programs have been translated into SMV files describing transition systems for nuXmv,
Python code generating the transition system required by F3 and in t2 language for tools such as T2 and Anant.
We created a separate directory for Anant since there are some differences in the language accepted by T2 and Anant.
Tools like Ultimate and AProVE directly work on the C source code.


## NS
The `nonlinear_software` directory contains nonlinear software programs.
29 of these benchmarks are the nonlinear benchmarks written in t2 language for Anant used in [3].
The `example1` benchmark has been taken from [4].
The benchmarks have been translated into C programs, SMV models and Python generators for F3.


## ITS
The `ltl_infinite_state` directory contains LTL model checking problems on infinite state transition systems.
These benchmarks have been written in the SMV language for nuXmv and translated for F3.
The transition systems have been transformed into a corresponding C code, to allow the use of the LTL verification procedures of Ultimate.

* `airbag` contains 2 problems corresponding to 2 proofs obligations generated by a contract-based verification procedure (Ocra [5]).
* `bakery_simple_bug` contains a modelling of the Bakery mutual exclusion protocol with a bug; the instances have been generated by considering up to 30 processes.
* `bounded_counter` contains some handcrafted examples, these are variations on the interactions between a counter and a corresponding bound.
* `semaphore` contains a modelling of a semaphore based mutual exclusion protocol; the instances have been generated by considering up to 30 processes.
* `simple_int_loops` contains some handcrafted examples describing loops with integer variables.
* `simple_real_loops` contains some handcrafted examples describing loops with variables of type real.


## TA
The `ltl_timed_automata` directory contains LTL model checking problems on timed automata.
The benchmarks have been taken from [6], which provides a collection of timed automata from different sources, and from Uppaal website [7].
We considered the models for the following protocols:
* `critical-region` contains the benchmark with the same name taken from [7].
* `csma-cd` contains models of the Carrier-sense multiple access with collision detection protocol [6].
* `fddi` contains models of the Token-Ring FDDI protocol [6].
* `fischer` contains models of the Fischer mutual exclusion protocol [6].
* `lynch` contains models of the Lynch mutual exclusion protocol [6].
* `train` contains models describing the interaction between trains and a gate [6].
For each of them we wrote an LTL property and introduced a modelling error such that the property does not hold.
Each of these benchmarks can be scaled by increasing the number of processes, we considered each protocol up to 30 processes.
We wrote the input models for DiVinE3, F3, MITLBMC, nuXmv, Ultimate and Uppaal.
Uppaal does not support full LTL, and the fischer and lynch LTL properties cannot be expressed for Uppaal.
We generated the model for Ultimate by reducing the LTL verification problem on timed automata to a LTL verification problem on a infinite state system.
This is achieved by relying on the same procedure used internally by F3. We then translated the transition system into a C program as above.


## TTS
The `ltl_timed_transition_system` directory contains LTL model checking problems on timed transition systems.
Timed transition systems extend timed-automata with also infinite state (integer or real) discrete symbols [8].
We wrote these models for F3, nuXmv and Ultimate. We obtained the Ultimate inputs by applying the same procedure described for timed automata.
The benchmarks consider an extension to the csma-cd, fischer and lynch protocol we considered for timed automata.
* `csma_backoff` contains models of a csma-cd inspired protocol in which a process upon detecting a conflict backs-off for a certain amount of time before retrying.
* `dynamic_fischer` contains models of a fischer inspired protocol in which the processes agree on the amount of time they need to wait before entering the critical section.
* `dynamic_lynch` contains models of a lynch inspired protocol in which the processes agree on the amount of time they need to wait before entering the critical section.
* `token_ring` contains models we wrote inspired by the token-ring FDDI protocol.
* `f3`, `nuxmv` and `ultimate` contain the same models written in the different input formats. These are handcrafted models, one of which contains a nonlinearity which Ultimate does not support.


## HS
The `ltl_hybrid_system` directory contains LTL model checking problems on hybrid systems taken from [4].
The hybrid systems have been encoded for nuXmv and F3 as infinite state transition systems in which a symbol `delta` must diverge to ensure non-zenoness.
We did not generate the C programs for Ultimate since, these are all nonlinear benchmarks and Ultimate does not support nonlinear expressions.


## References
[1] https://termcomp.github.io/Y2020/
[2] https://github.com/TermCOMP/TPDB
[3] Byron Cook, Carsten Fuhs, Kaustubh Nimkar and Peter Oâ€™Hearn. Disproving termination with overapproximation. FMCAD 2014.
[4] Alessandro Cimatti, Alberto Griggio and Enrico Magnago. Proving the existence of fair paths in infinite state systems. VMCAI 2021.
[5] https://ocra.fbk.eu/
[6] https://github.com/farkasrebus/XtaBenchmarkSuite
[7] https://uppaal.org/benchmarks/
[8] Alessandro Cimatti, Alberto Griggio, Enrico Magnago, Marco Roveri, and Stefano Tonetta. Extending nuxmv with timed transition systems and timed temporal properties. CAV 2019.
