-- CSMA-CD
-- In a broadcast network with a multi-access bus, the problem of assigning the bus to only one of many competing stations arises.
-- The CSMA/CD protocol (Carrier Sense, Multiple-Access with Collision Detection) describes one solution.
-- Roughly, whenever a station has data to send, if first listens to the bus.
-- If the bus is idle (i.e., no other station is transmitting), the station begins to send a message.
-- If it detects a busy bus in this process, it waits a random amount of time and then repeats the operation.
@TIME_DOMAIN continuous
MODULE main
DEFINE
  LAMBDA := 404;
  SIGMA := 13;

VAR
  bus : Bus(SIGMA);
  s0 : Station(LAMBDA, SIGMA);
  env : Environment(); -- abstract other components.

-- stations can not move together.
TRANS (s0.evt_stutter | env.evt_stutter);
-- not all stutter
TRANS !bus.evt_stutter | !s0.evt_stutter | !env.evt_stutter;

-- sync bus and stations
TRANS bus.evt_begin <-> (s0.evt_begin | env.evt_begin);
TRANS bus.evt_end <-> (s0.evt_end | env.evt_end);
TRANS bus.evt_busy <-> (s0.evt_busy | env.evt_busy);
TRANS bus.evt_cd <-> (s0.evt_cd | env.evt_cd);
TRANS ((bus.evt_cd & bus.cd_id) <-> s0.evt_cd) & ((bus.evt_cd & !bus.cd_id) <-> env.evt_cd);

LTLSPEC NAME UNSAFE := (G F s0.l = transm) -> (G F s0.l = wait);

MODULE Environment
  IVAR
    event : {stutter, begin, end, busy, cd};
  DEFINE
    evt_stutter := event = stutter;
    evt_begin := event = begin;
    evt_end := event = end;
    evt_busy := event = busy;
    evt_cd := event = cd;

MODULE Station(LAMBDA, SIGMA)
IVAR
  event : {stutter, begin, end, busy, cd};
DEFINE
  evt_stutter := event = stutter;
  evt_begin := event = begin;
  evt_end := event = end;
  evt_busy := event = busy;
  evt_cd := event = cd;
VAR
  l : {wait, transm, retry};
  x : clock;
  backoff : real;

  TRANS evt_stutter -> (next(l) = l & next(x) = x & next(backoff) = backoff);

  INVAR TRUE -> backoff >= SIGMA;

INIT l = wait & x = 0;

INVAR l = transm -> x <= LAMBDA;

-- wait -> (wait | transm | retry1 | retry2)
TRANS (!evt_stutter & l = wait) -> (next(l) = wait | next(l) = transm | next(l) = retry);
-- wait -> wait
TRANS (!evt_stutter & l = wait & next(l) = wait) -> (evt_cd & next(x) = 0 & next(backoff) = backoff);
-- wait -> transm
TRANS (!evt_stutter & l = wait & next(l) = transm) -> (evt_begin & next(x) = 0 & next(backoff) = backoff);
-- wait -> retry1 | retry2
TRANS (!evt_stutter & l = wait & next(l) = retry) -> (next(x) = 0 & (evt_cd | evt_busy) & next(backoff) = backoff);

-- transm -> (wait | retry)
TRANS (!evt_stutter & l = transm) -> (next(l) = wait | next(l) = retry);
-- transm -> wait
TRANS (!evt_stutter & l = transm & next(l) = wait) -> (evt_end & x >= LAMBDA & next(x) = 0 & next(backoff) <= backoff);
-- transm -> retry
TRANS (!evt_stutter & l = transm & next(l) = retry) -> (evt_cd & next(x) = 0 & next(backoff) >= backoff + 1);

-- retry -> (retry | transm)
TRANS (!evt_stutter & l = retry) -> (next(l) = retry | next(l) = transm);
-- retry -> retry
TRANS (!evt_stutter & l = retry & next(l) = retry) -> (evt_cd & next(x) = 0 & next(backoff) = backoff);
-- retry -> transm
TRANS (!evt_stutter & l = retry & next(l) = transm) -> (evt_begin & x >= backoff & next(x) = 0 & next(backoff) = backoff);


MODULE Bus(SIGMA)
DEFINE
  evt_stutter := event = stutter;
  evt_begin := event = begin;
  evt_end := event = end;
  evt_busy := event = busy;
  evt_cd := event = cd;
IVAR
  event : {stutter, begin, end, busy, cd};
VAR
  cd_id : boolean; -- true for station, false for environment
  x : Clock;
  l : {idle, active, collision, transmit}; -- location of the timed automata

TRANS evt_stutter -> (next(l) = l & next(x) = x);

INIT x = 0 & l = idle & cd_id;

-- no time elapse in location transmit
URGENT l = transmit;

-- location invariant.
INVAR l = collision -> x < SIGMA;

-- idle -> active
TRANS (!evt_stutter & l = idle) -> (next(l) = active & evt_begin & (next(cd_id) <-> cd_id) & next(x) = 0);

-- active -> (idle | active | collision)
TRANS (!evt_stutter & l = active) -> (next(l) = idle | next(l) = active | next(l) = collision);
-- active -> idle
TRANS (!evt_stutter & l = active & next(l) = idle) -> (evt_end & next(x) = 0 & (next(cd_id) <-> cd_id));
-- active -> active
TRANS (!evt_stutter & l = active & next(l) = active) -> (evt_busy & x >= SIGMA & next(x) = x & (next(cd_id) <-> cd_id));
-- active -> collision
TRANS (!evt_stutter & l = active & next(l) = collision) -> (evt_begin & x < SIGMA & next(x) = 0);

-- collision -> transmit
TRANS (!evt_stutter & l = collision) -> (next(l) = transmit & x < SIGMA & evt_cd & next(x) = 0 & (next(cd_id) <-> !cd_id));

-- transmit -> idle
TRANS (!evt_stutter & l = transmit) -> (next(l) = idle & next(x) = 0 & (next(cd_id) <-> cd_id));
