@TIME_DOMAIN continuous
MODULE main

  VAR
    mgr : TokenManager;
    total_transm_time : real;
      st0 : Station(mgr);
  st1 : Station(mgr);
  st2 : Station(mgr);


    -- only 1 station moves at a time.
  TRANS st0.stutter | st1.stutter | st2.stutter;
  -- not all stutter.
  TRANS !(mgr.stutter & st0.stutter & st1.stutter & st2.stutter);
  -- sync stations and mgr.
  TRANS mgr.acquire <-> (st0.acquire | st1.acquire | st2.acquire);
  TRANS mgr.release <-> (st0.release | st1.release | st2.release);

  INIT total_transm_time = 0;
  TRANS (mgr.counting & next(mgr.idle)) -> next(total_transm_time) = total_transm_time + mgr.c;
  TRANS !(mgr.counting & next(mgr.idle)) -> next(total_transm_time) = total_transm_time;

  INVARSPEC ! (st0.transm & st1.transm);
  LTLSPEC (G F (mgr.counting & next(mgr.idle))) -> G F total_transm_time < 10;


MODULE TokenManager
  IVAR
    evt : {_acquire, _release, _stutter};
  VAR
    loc : {_idle, _counting};
    timeout : real;
    c : clock;

  DEFINE
    acquire := evt = _acquire;
    release := evt = _release;
    stutter := evt = _stutter;
    idle := loc = _idle;
    counting := loc = _counting;

  INIT c = 0 & idle & timeout = 0;
  INVAR counting -> c <= timeout;

  TRANS stutter -> next(loc) = loc & next(timeout) = timeout & next(c) = c;

  TRANS (!stutter & idle) -> (acquire & next(counting) & next(c) = 0);
  TRANS (!stutter & counting) -> (release & next(idle) & next(c) = 0 & next(timeout) = 0);


MODULE Station(mgr)
  IVAR
    evt : {_acquire, _release, _stutter};
  VAR
    loc : {_idle, _transm};
    req_time : real;

  DEFINE
    acquire := evt = _acquire;
    release := evt = _release;
    stutter := evt = _stutter;
    idle := loc = _idle;
    transm := loc = _transm;

  INIT idle;
  INVAR req_time > 0;

  TRANS stutter -> (next(loc) = loc & next(req_time) = req_time);
  TRANS (!stutter & idle) -> (acquire & next(transm) & next(mgr.timeout) = req_time & next(req_time) = req_time);
  TRANS (!stutter & transm) -> (release & mgr.c > 0 & next(idle));