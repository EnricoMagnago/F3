MODULE main
  DEFINE
    MAX_IDX := 7;
  VAR
    number : array 0..MAX_IDX of integer;
    min_num : integer;
    max_num : integer;
    run : 0..MAX_IDX;
      p0 : Proc(0, run = 0, number, min_num, max_num);
  p1 : Proc(1, run = 1, number, min_num, max_num);
  p2 : Proc(2, run = 2, number, min_num, max_num);
  p3 : Proc(3, run = 3, number, min_num, max_num);
  p4 : Proc(4, run = 4, number, min_num, max_num);
  p5 : Proc(5, run = 5, number, min_num, max_num);
  p6 : Proc(6, run = 6, number, min_num, max_num);
  p7 : Proc(7, run = 7, number, min_num, max_num);


  INIT number[0] = 0 & number[1] = 0 & number[2] = 0 & number[3] = 0 & number[4] = 0 & number[5] = 0 & number[6] = 0 & number[7] = 0;

  INVAR max_num >= number[0] & max_num >= number[1] & max_num >= number[2] & max_num >= number[3] & max_num >= number[4] & max_num >= number[5] & max_num >= number[6] & max_num >= number[7];
  INVAR max_num = number[0] | max_num = number[1] | max_num = number[2] | max_num = number[3] | max_num = number[4] | max_num = number[5] | max_num = number[6] | max_num = number[7];

  INVAR (number[0] = 0 & number[1] = 0 & number[2] = 0 & number[3] = 0 & number[4] = 0 & number[5] = 0 & number[6] = 0 & number[7] = 0) <-> min_num = 0;
  INVAR number[0] > 0 -> min_num <= number[0];
INVAR number[1] > 0 -> min_num <= number[1];
INVAR number[2] > 0 -> min_num <= number[2];
INVAR number[3] > 0 -> min_num <= number[3];
INVAR number[4] > 0 -> min_num <= number[4];
INVAR number[5] > 0 -> min_num <= number[5];
INVAR number[6] > 0 -> min_num <= number[6];
INVAR number[7] > 0 -> min_num <= number[7];

  INVAR min_num = number[0] | min_num = number[1] | min_num = number[2] | min_num = number[3] | min_num = number[4] | min_num = number[5] | min_num = number[6] | min_num = number[7];

  LTLSPEC (G ((F p0.pick_num) & (F !p0.pick_num))) -> (G F number[0] = 0);

MODULE Proc(id, run, number, min_num, max_num)
  VAR
    loc : {_pick_num, _wait_turn, _cs, _unlock};

  DEFINE
    pick_num := loc = _pick_num;
    wait_turn := loc = _wait_turn;
    cs := loc = _cs;
    unlock := loc = _unlock;

  INIT pick_num;

  TRANS (!run) -> (next(loc) = loc & next(number[id]) = number[id]);

  TRANS (run & pick_num) -> (next(number[id]) = 1 + max_num & next(wait_turn));
  TRANS (run & wait_turn) -> ((next(wait_turn) | next(cs)) & next(number[id]) = number[id]);
  TRANS (run & wait_turn) -> (next(cs) <-> (number[id] <= min_num & (number[0] = min_num -> id = 0) & (number[1] = min_num -> id <= 1) & (number[2] = min_num -> id <= 2) & (number[3] = min_num -> id <= 3) & (number[4] = min_num -> id <= 4) & (number[5] = min_num -> id <= 5) & (number[6] = min_num -> id <= 6) & (number[7] = min_num -> id <= 7)));
  TRANS (run & cs) -> (next(cs) | next(unlock)) & next(number[id]) = number[id];
  TRANS (run & unlock) -> (next(pick_num)) & next(number[id]) = number[id];
