MODULE main
  IVAR
    fault_corruption : boolean;
    fault_deletion : boolean;

  VAR
    collision : boolean;
    device.exploded : boolean;
    device.LastValidCounter : integer; -- {14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
    link.NewDataAvailable : boolean;
    link.ValidCRC : boolean;
    link.out_message : {other_message, explode, no_message};
    link.out_Counter : integer; -- {14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
    sensor.message : {other_message, explode, no_message};
    sensor.Counter : integer; -- {14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
    newValidData : boolean;

  FROZENVAR
    MaxDeltaCounterInit : {7, 6, 5, 4, 3, 2, 1};

  CONSTANTS
    other_message, explode, no_message;

  INIT sensor.message = no_message;
  INIT !link.NewDataAvailable;
  INIT !link.ValidCRC;
  INIT newValidData <-> link.NewDataAvailable & link.ValidCRC;

  TRANS collision <-> next(sensor.message) = explode;
  TRANS sensor.message != no_message -> next(sensor.Counter) = (sensor.Counter + 1); -- mod 15;
  TRANS sensor.message = no_message -> next(sensor.Counter) = sensor.Counter;
  TRANS !fault_deletion -> ((next(link.NewDataAvailable) <-> sensor.message != no_message) &
                            next(link.out_message) = sensor.message &
                            next(link.out_Counter) = sensor.Counter);
  TRANS !fault_corruption -> next(link.ValidCRC);
  TRANS next(device.LastValidCounter) = link.out_Counter | next(device.LastValidCounter) = device.LastValidCounter;
  TRANS next(device.LastValidCounter) != device.LastValidCounter -> (link.NewDataAvailable & link.ValidCRC);
  TRANS next(link.NewDataAvailable) ->  !fault_deletion;
  TRANS next(link.ValidCRC) -> !fault_corruption;
  TRANS next(newValidData) <-> (newValidData | (next(link.NewDataAvailable) & next(link.ValidCRC)));

  TRANS device.exploded -> next(device.exploded);

  TRANS (newValidData &
         next(link.NewDataAvailable) & next(link.ValidCRC) & next(link.out_message) = explode &
         -- (next(link.out_Counter) >= next(device.LastValidCounter) ? next(link.out_Counter) : 15 + next(link.out_Counter)) - next(device.LastValidCounter)  >= 1 &
         next(link.out_Counter) - next(device.LastValidCounter)  >= 1 &
         -- (next(link.out_Counter) >= next(device.LastValidCounter) ? next(link.out_Counter): 15 + next(link.out_Counter)) - next(device.LastValidCounter)  <= MaxDeltaCounterInit + 1
         next(link.out_Counter) - next(device.LastValidCounter)  <= MaxDeltaCounterInit + 1
        ) -> next(device.exploded);

  -- LTLSPEC NAME TEST := G (newValidData <-> O (link.NewDataAvailable & link.ValidCRC));

  LTLSPEC (G F sensor.message != no_message) ->
    (MaxDeltaCounterInit >= 2 &
     G (
        -- (collision ->  G collision) &
        ((fault_corruption | fault_deletion) ->  X !(fault_corruption | fault_deletion)))) -> G (collision -> F device.exploded);
