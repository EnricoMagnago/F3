-- int main() {
--     int x, y, oldx;
--     x = __VERIFIER_nondet_int();
--     y = __VERIFIER_nondet_int();
--     while (x < 5) { // l0
--         oldx = x; // l1
--         x = oldx - y; // l2
--         y = oldx + y; // l3
--     }
--     return 0; // end
-- }

MODULE main
  VAR
    pc : {l0, l1, l2, l3, end};
    x : integer;
    y : integer;
    oldx : integer;

  --control flow graph
  ASSIGN
    init(pc) := l0;
    next(pc) :=
      case
        pc = l0 & (x < 5) : l1;
        pc = l0 & !(x < 5) : end;
        pc = l1 : l2;
        pc = l2 : l3;
        pc = l3 : l0;
        TRUE : end;
      esac;

  DEFINE
    same_x := next(x) = x;
    same_y := next(y) = y;
    same_oldx := next(oldx) = oldx;
    same := same_x & same_y & same_oldx;

  TRANS pc = l0 -> same;
  TRANS pc = l1 -> same_x & same_y & next(oldx) = x;
  TRANS pc = l2 -> next(x) = oldx - y & same_y & same_oldx;
  TRANS pc = l3 -> same_x & next(y) = oldx + y & same_oldx;
  TRANS pc = end -> same;

  LTLSPEC NAME TERMINATION := F pc = end;
