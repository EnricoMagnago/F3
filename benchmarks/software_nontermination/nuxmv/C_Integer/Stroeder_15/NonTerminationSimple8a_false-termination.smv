-- int main()
-- {
--  int x;
--     x = __VERIFIER_nondet_int();
--  while (x >= 0) { // l0
--    if (__VERIFIER_nondet_int() != 0) { // l1
--      x = x + 1; // l2
--    } else {if (__VERIFIER_nondet_int() != 0) { // l3
--      x = x + 2; // l4
--    } else {if (__VERIFIER_nondet_int() != 0) { // l5
--      x = x + 3; // l6
--    } else {if (__VERIFIER_nondet_int() != 0) { // l7
--      x = x + 4; // l8
--    } else {
--      x = -1; // l9
--    }}}}
--  }
--  return 0; // end
-- }

MODULE main
  VAR
    pc : {l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, end};
    x : integer;
    nondet : integer;

  --control flow graph
  ASSIGN
    init(pc) := l0;
    next(pc) :=
      case
        pc = l0 & (x >= 0) : l1;
        pc = l0 & !(x >= 0) : end;
        pc = l1 & (nondet != 0) : l2;
        pc = l1 & !(nondet != 0) : l3;
        pc = l2 : l0;
        pc = l3 & (nondet != 0) : l4;
        pc = l3 & !(nondet != 0) : l5;
        pc = l4 : l0;
        pc = l5 & (nondet != 0) : l6;
        pc = l5 & !(nondet != 0) : l7;
        pc = l6 : l0;
        pc = l7 & (nondet != 0) : l8;
        pc = l7 & !(nondet != 0) : l9;
        pc = l8 : l0;
        pc = l9 : l0;
        TRUE : end;
      esac;

  DEFINE
    same_x := next(x) = x;
    same_nondet := next(nondet) = nondet;
    same := same_x & same_nondet;

  TRANS pc = l0 -> same_x;
  TRANS pc = l1 -> same_x;
  TRANS pc = l2 -> next(x) = x + 1;
  TRANS pc = l3 -> same_x;
  TRANS pc = l4 -> next(x) = x + 2;
  TRANS pc = l5 -> same_x;
  TRANS pc = l6 -> next(x) = x + 3;
  TRANS pc = l7 -> same_x;
  TRANS pc = l8 -> next(x) = x + 4;
  TRANS pc = l9 -> next(x) = -1;
  TRANS pc = end -> same;

  LTLSPEC NAME TERMINATION := F pc = end;
