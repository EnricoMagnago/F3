MODULE main
DEFINE
  A_ := 25;
  Am1 := 24;
  B := 50;
VAR
  id : 0..{proc_num};
  c : Counter({proc_num}, id);
{arbiter_decls}
{prodcell_decls}

INIT id = 0;
TRANS (c.evt_stutter & {all_arbiters_stutter}) -> next(id) = id;
-- sync arbiter and prodcell
{sync_arbiter_prodcell}

MITLSPEC (FALSE SR (pc0.l != error | pc1.l != error)) -> (FALSE SR (TRUE SU (id = 0)));

MODULE Counter(N, id)
VAR event : {{stutter, move}};
DEFINE
  evt_stutter := event = stutter;
  evt_move := event = move;
VAR
  l : {{initial, initCount}};

INIT l = initial;

TRANS evt_stutter -> next(l) = l;

-- initial -> initCount
TRANS (!evt_stutter & l = initial) -> (id = 0 & next(id) = 1 & next(l) = initCount);

-- initCount -> initCount
TRANS (!evt_stutter & l = initCount) -> (next(l) = initCount &
                                         ((id >= N & next(id) = 1) |
                                          (0 < id & id < N & next(id) = id + 1)));


MODULE Arbiter(i, id)
VAR event : {{stutter, enter, exit}};
DEFINE
  evt_stutter := event = stutter;
  evt_enter := event = enter;
  evt_exit := event = exit;
VAR
  l : {{s0, s1}};

INIT l = s1;

TRANS (evt_stutter) -> next(l) = l;
-- s1 -> s0
TRANS (!evt_stutter & l = s1) -> (next(l) = s0 & evt_enter & id = i & next(id) = 0);
-- s0 -> s1
TRANS (!evt_stutter & l = s0) -> (next(l) = s1 & evt_exit & next(id) = i);


MODULE ProdCell(A_, Am1, B)
VAR event : {{stutter, enter, exit, move}};
DEFINE
  evt_stutter := event = stutter;
  evt_enter := event = enter;
  evt_exit := event = exit;
  evt_move := event = move;
VAR
  l : {{not_ready, testing, requesting, critical, testing2, safe, error}};
  x : clock((l = not_ready & next(l) = testing) |
            (l = testing & next(l) = not_ready) |
            (l = requesting & next(l) = critical) |
            (l = critical & next(l) = testing2) |
            (l = safe & next(l) = not_ready));

INIT l = not_ready;

INVAR (l = testing | l = testing2) -> x <= A_;
INVAR l = critical -> x <= B;

TRANS evt_stutter -> (next(l) = l);

-- not_ready -> testing
TRANS (!evt_stutter & l = not_ready) -> (evt_move & x <= B & next(l) = testing);

-- testing -> [not_ready | requesting]
TRANS(!evt_stutter & l = testing) -> ((next(l) = not_ready | next(l) = requesting) & evt_move);
TRANS (l = testing & next(l) = not_ready) -> (x >= A_);
TRANS (l = testing & next(l) = requesting) -> (x <= Am1);

-- requesting -> critical
TRANS (!evt_stutter & l = requesting) -> (next(l) = critical & evt_enter);

-- critical -> [error | testing2]
TRANS (!evt_stutter & l = critical) -> (next(l) = error | next(l) = testing2);
TRANS (l = critical & next(l) = error) -> (evt_move & x >= B);
TRANS (l = critical & next(l) = testing2) -> (evt_exit & x <= Am1);

-- testing2 -> [error | safe]
TRANS (!evt_stutter & l = testing2) -> ((next(l) = error | next(l) = safe) & evt_move);
TRANS (l = testing2 & next(l) = error) -> (x >= A_);
TRANS (l = testing2 & next(l) = safe) -> (x <= Am1);

-- error -> error
TRANS (!evt_stutter & l = error) -> next(l) = error;

-- safe -> not_ready
TRANS (!evt_stutter & l = safe) -> next(l) = not_ready;
